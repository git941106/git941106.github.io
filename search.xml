<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>pyqt5</title>
      <link href="/2021/12/03/pyqt5%E7%95%8C%E9%9D%A2%E7%BC%96%E7%A8%8B/"/>
      <url>/2021/12/03/pyqt5%E7%95%8C%E9%9D%A2%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>PyQt5 都是基于著名的 Qt 库。</p><p>Qt库里面有非常强大的图形界面开发库，但是Qt库是C++语言开发的，PySide2、PyQt5可以让我们通过Python语言使用Qt</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pyqt5<span class="token operator">-</span>tools<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>即可同时安装 PyQt5 和 一些重要的工具，比如 Qt designer</p><p>水平布局元素垂直居中</p><p>当多个元素垂直布局后，如果一行中只有一个元素，元素会独占一行，且元素会自动拉伸，文字除外，可设置Qwidget类中sizePolicy的水平策略为fixed，元素会自动恢复原来大小，且向左对齐，如果想要让元素居中，为元素添加一个水平布局，元素自动给居中</p><h3 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h3><h4 id="添加资源文件"><a href="#添加资源文件" class="headerlink" title="添加资源文件"></a>添加资源文件</h4><p>新建.qrc配置文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>RCC</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>qresource</span> <span class="token attr-name">prefix</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>D:/powernode/pyqt5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>logo.png<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>file</span><span class="token punctuation">></span></span>bg.jpg<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>qresource</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>RCC</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>prefix是路径</p><p>file中的是文件名字</p><p>建议qrc文件与资源文件在同一个路径</p><h4 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h4><p>标签中使用图片</p><p>QLabel中设置pixmap选择图片，选择文件，选择资源可能不显示图片，</p><p>scaledContents勾选后，可以整体调节图片</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pyqt5 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins</title>
      <link href="/2021/11/20/jenkins%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/11/20/jenkins%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>jenkins是支持可持续交付的工具</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li>linux</li><li>docker</li></ol><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><p>拉取镜像</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull jenkins/jenkins:lts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新建jenkins的工作目录</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /home/.jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>赋予权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看jenkins用户的id,默认是1000，</span>docker run -it --rm --entrypoint<span class="token operator">=</span><span class="token string">"/bin/bash"</span> jenkins/jenkins:lts -c <span class="token string">"whoami &amp;&amp; id"</span><span class="token comment"># 修改</span><span class="token function">sudo</span> <span class="token function">chown</span> -R <span class="token number">1000</span> /home/.jenkins<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行容器</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d -p <span class="token number">8080</span>:8080 -p <span class="token number">50000</span>:50000 --name jenkins  -v /home/.jenkins:/var/jenkins_home jenkins/jenkins:lts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>-d：后台运行</p><p>-p：端口映射</p><p>-v：路径映射</p><p>–name:容器起别名</p><p>浏览器访问地址ip:8080的映射端口,管理员密码使用docker logs jenkins查看，由于进行了路径映射，也可以使用cat /home/.jenkins/secrets/initialAdminPassword 查看密码，/home/.jenkins是之前的映射路径</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120105904530.png" alt="输入密码界面"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120110217745.png" alt="jenkins插件安装界面"></p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="安装中文插件"><a href="#安装中文插件" class="headerlink" title="安装中文插件"></a>安装中文插件</h4><p><a class="link"   href="https://wiki.jenkins-ci.org/display/JENKINS/Localization+zh+cn+Plugin" >Localization: Chinese (Simplified)<i class="fas fa-external-link-alt"></i></a> </p><p>配置插件升级站点的文件下载地址：配置这个主要是配置下载update-center.json文件，这个配置并不能配置插件的下载地址</p><p>配置镜像地址</p><p><a class="link"   href="https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html" >https://www.cnblogs.com/hellxz/p/jenkins_install_plugins_faster.html<i class="fas fa-external-link-alt"></i></a></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> hudson.model.UpdateCenter.xml <span class="token comment"># 将https://updates.jenkins.io/update-center.json修改为</span><span class="token comment"># https://updates.jenkins-zh.cn/update-center.json</span><span class="token comment"># 进入jenkins首页可以使用界面来修改，如下图所示</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120113057262.png" alt="插件下载地址"></p><h4 id="修改jenkins容器的时间"><a href="#修改jenkins容器的时间" class="headerlink" title="修改jenkins容器的时间"></a>修改jenkins容器的时间</h4><p>docker run的时候加参数-e JAVA_OPTS=-Duser.timezone=Asia/Shanghai</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker run -d --name jenkins -p <span class="token number">8080</span>:8080 -p <span class="token number">50000</span>:50000 -e <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span>-Duser.timezone<span class="token operator">=</span>Asia/Shanghai -v jenkins:/var/jenkins_home jenkins/jenkins:lts设置jenkins系统时区<span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span>-Duser.timezone<span class="token operator">=</span>Asia/Shanghai<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果已经部署容器，可使用如下方法</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 管理员权限进入容器内部</span>docker <span class="token builtin class-name">exec</span> -it -u root jenkins /bin/bash <span class="token comment"># 设置时区</span><span class="token builtin class-name">echo</span> Asia/Shanghai <span class="token operator">></span>/etc/timezone<span class="token comment"># 退出容器</span><span class="token builtin class-name">exit</span><span class="token comment"># 复制本机时间信息到容器中</span>docker <span class="token function">cp</span> /usr/share/zoneinfo/Asia/Shanghai jenkins:/etc/localtime<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过git拉取代码执行自动化测试"><a href="#通过git拉取代码执行自动化测试" class="headerlink" title="通过git拉取代码执行自动化测试"></a>通过git拉取代码执行自动化测试</h4><p>执行自动化代码的机器(linux)环境准备</p><ol><li>git，安装git，yum  -y install git,此方式安装版本较低</li><li>python环境(自动化代码用的python)，linux默认的是python2，需要安装python3</li><li>pytest(自动化代码中使用pytest)，pip3 install pytest</li><li>jdk，ssh连接的插件需要java环境，如果使用其他方式连接从节点，可忽略</li></ol><p>由于jenkins是安装在docker中，如果需要执行代码，必须在容器中安装需要的环境，容器中安装环境不太方便，可以选择让宿主机(安装docker的机器)成为从节点，在宿主机配置环境即可</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120201713900.png" alt="插件管理截图"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120154304831.png" alt="安装ssh插件"></p><p>jenkins-系统管理-全局安全配置</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120154806926.png" alt="开启ssh"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120202754119.png" alt="新建任务"></p><h4 id="集成html报告"><a href="#集成html报告" class="headerlink" title="集成html报告"></a>集成html报告</h4><p>jenkins中安装HTML Publisher</p><p>新建任务时，选择构建-增加构建步骤-执行shell，输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">pytest --html<span class="token operator">=</span>report/report.html --self-contained-html<span class="token comment"># --self-contained-html只生成一个html文件，js也在文件中，不加此参数会生成多个文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120221158372.png" alt="添加生成报告步骤"></p><p>点击构建后操作-填写如下图所示</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120221651118.png" alt="image-20211120221651118"></p><h4 id="解决报告中css无法使用"><a href="#解决报告中css无法使用" class="headerlink" title="解决报告中css无法使用"></a>解决报告中css无法使用</h4><p>配置好后，需要重新构建</p><p>安装Groovy插件</p><p>新建任务时，选择构建-增加构建步骤-Execute system Croovy script-填入如下脚本</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">System<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"hudson.model.DirectoryBrowserSupport.CSP"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="upload%5Cimage-20211120220743946.png" alt="集成html步骤"></p><p>如果执行groovy脚本还不能解决，再安装Startup Trigger插件</p><p>新建任务时，在构建触发器中勾选 Build when job nodes start</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120222117857.png" alt="image-20211120222117857"></p><h4 id="集成allure报告"><a href="#集成allure报告" class="headerlink" title="集成allure报告"></a>集成allure报告</h4><ol><li>allure安装，下载<a class="link"   href="https://github.com/allure-framework/allure2/releases/download/2.16.1/allure-2.16.1.zip" >allure<i class="fas fa-external-link-alt"></i></a>的zip文件，解压后，配置环境变量</li><li>jenkins中安装插件allure</li><li>安装allure-pytest，pip3 install allure-pytest</li><li>jenkins中，系统管理-全局工具配置，配置allure的安装目录</li></ol><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122123727747.png" alt="image-20211122123727747"></p><p>新建任务时，添加构建后操作</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122124146939.png" alt="image-20211122124146939"></p><h4 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h4><p>构建失败时，发送邮件</p><p>默认的邮箱通知，发送邮件</p><p>系统管理-系统配置，先配置系统管理员邮箱地址</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122120016402.png" alt="image-20211122120016402"></p><p>配置邮件通知信息</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122114752420.png" alt="配置邮件通知"></p><p>点击高级，配置发件人信息，发件人邮箱需要与系统管理员邮箱一致</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122115020253.png" alt="image-20211122115020253"></p><p>新建任务，增加构建后操作</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122115324079.png" alt="image-20211122115324079"></p><p>填写接收人邮箱，多个邮箱使用空格隔开</p><p><img src="upload%5Cimage-20211122115413652.png" alt="image-20211122115413652"></p><p>由于发送邮件只能在任务执行不稳定或者任务执行失败时发送，需要新建任务中的shell中添加exit 1，如下所示，配置完后，点击立即构建就能收到邮件</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122115607758.png" alt="image-20211122115607758"></p><p>由于默认的邮件发送，内容不能编辑，可安装插件Email Extension Plugin</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122120326092.png" alt="image-20211122120326092"></p><p>系统管理-系统配置，找到email配置</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122120659112.png" alt="image-20211122120659112"></p><p>添加邮箱用户名与授权码界面</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122120949114.png" alt="image-20211122120949114"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122121301383.png" alt="image-20211122121301383"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122121451599.png" alt="image-20211122121451599"></p><p>模板内容</p><pre class="line-numbers language-html" data-language="html"><code class="language-html"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>$&#123;ENV, var="JOB_NAME"&#125;-第$&#123;BUILD_NUMBER&#125;次构建日志<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span> <span class="token attr-name">leftmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">marginwidth</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">topmargin</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>8<span class="token punctuation">"</span></span> <span class="token attr-name">marginheight</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>4<span class="token punctuation">"</span></span>        <span class="token attr-name">offset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>table</span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>95%<span class="token punctuation">"</span></span> <span class="token attr-name">cellpadding</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">cellspacing</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span>  <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font-size</span><span class="token punctuation">:</span> 11pt<span class="token punctuation">;</span> <span class="token property">font-family</span><span class="token punctuation">:</span> Tahoma<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> sans-serif</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                本邮件由系统自动发出，无需回复！<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>                        各位同事，大家好，以下为$&#123;PROJECT_NAME &#125;项目构建信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>br</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#CC0000<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>构建结果 - $&#123;BUILD_STATUS&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>           <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>构建信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tr</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>td</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>项目名称 ： $&#123;PROJECT_NAME&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建编号 ： 第$&#123;BUILD_NUMBER&#125;次构建<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>触发原因： $&#123;CAUSE&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建状态： $&#123;BUILD_STATUS&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建日志： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;BUILD_URL&#125;console<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;BUILD_URL&#125;console<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>构建  Url ： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;BUILD_URL&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;BUILD_URL&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>测试报告： <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;PROJECT_URL&#125;allure<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;allure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>失败用例<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>$FAILED_TESTS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name">color</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>#0B610B<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>最近提交(#$SVN_REVISION)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h4</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span> <span class="token attr-name">width</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100%<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>$&#123;CHANGES_SINCE_LAST_SUCCESS, reverse=true, format="%c", changesFormat="<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>%d [%a] %m<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>"&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>详细提交: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>$&#123;PROJECT_URL&#125;changes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>$&#123;PROJECT_URL&#125;changes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>td</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tr</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>table</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122121901659.png" alt="image-20211122121901659"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122121955402.png" alt="image-20211122121955402"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211122122415275.png" alt="image-20211122122415275"></p><p>配置完成，点击构建，就可以接收到邮件</p><h4 id="配置从节点"><a href="#配置从节点" class="headerlink" title="配置从节点"></a>配置从节点</h4><p>从节点配置注意，需要安装ssh agent插件，如果配置从节点位置没有via，则继续安装<a class="link"   href="https://plugins.jenkins.io/ssh-slaves" >SSH Build Agents plugin<i class="fas fa-external-link-alt"></i></a>插件，SSH Build Agents plugin插件，需要安装java环境，并在添加从节点中配置环境变量</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211120164152532.png" alt="添加从节点配置环境变量"></p><h4 id="构建触发器"><a href="#构建触发器" class="headerlink" title="构建触发器"></a>构建触发器</h4><p>常见定时任务</p><table><thead><tr><th>执行时间</th><th>命令 分 时 天 月 星期 * * * * * *</th><th></th><th></th></tr></thead><tbody><tr><td>每隔1分钟执行一次</td><td>H /1 * * * *</td><td></td><td></td></tr><tr><td>每小时的20，30，40分钟执行</td><td>20,30,40  * * * *</td><td></td><td></td></tr><tr><td>每天9点，17点执行</td><td>* 9,17 * * *</td><td></td><td></td></tr><tr><td>每天9点30，16点30执行</td><td>30 9,16 * * *</td><td></td><td></td></tr><tr><td>每星期一，星期五，9点30，17点30执行</td><td>30 9,17 * * 1,5</td><td></td><td></td></tr></tbody></table><h5 id="定时构建"><a href="#定时构建" class="headerlink" title="定时构建"></a>定时构建</h5><p>在新建任务时，构建触发器-定时构建-输入定时表达式，如下图所示</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211121174758360.png" alt="定时构建图"></p><h5 id="轮询scm"><a href="#轮询scm" class="headerlink" title="轮询scm"></a>轮询scm</h5><p>轮询需要配置git，从git中拉取代码，轮询根据定时时间查询代码是否改变，如果没有改变，就不会执行，只有代码发生改变时，才会拉取代码执行</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211121211401472.png" alt="轮询图片"></p><h4 id="提交代码自动执行任务"><a href="#提交代码自动执行任务" class="headerlink" title="提交代码自动执行任务"></a>提交代码自动执行任务</h4><p>轮询需要定时查询代码是否发生改变，如果需要提交代码后，git通知jenkins执行任务，也是可以实现的。这需要在git上配置webhooks，由于git访问速度慢，使用gitee演示webhooks，地址点<a class="link"   href="https://gitee.com/help/articles/4193#article-header8" >这里<i class="fas fa-external-link-alt"></i></a>。</p><h4 id="设置查看报告不需要登录权限"><a href="#设置查看报告不需要登录权限" class="headerlink" title="设置查看报告不需要登录权限"></a>设置查看报告不需要登录权限</h4><p>安装插件Role-based Authorization Strategy</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211121223933816.png" alt="权限管理插件下载"></p><p>系统设置-全局安全配置-项目矩阵授权策略</p><p>设置游客全部读权限，任务中的读权限，即可不用登录查看报告，必须设置全部读权限，否则会重定向到登录页面</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211121225847077.png" alt="设置游客权限"></p>]]></content>
      
      
      <categories>
          
          <category> jenkins </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试用例设计</title>
      <link href="/2021/10/29/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/"/>
      <url>/2021/10/29/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E8%AE%BE%E8%AE%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>测试用例设计在测试中是非常重要的环节，在产品发布之前，进行测试，对产品的后期维护的关键环节。</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>测试用例设计一般分为三类</p><h4 id="web端用例设计"><a href="#web端用例设计" class="headerlink" title="web端用例设计"></a>web端用例设计</h4><p>web端用例设计指的是网页应用的用例设计，其优势在于更新后台的代码，用户访问就可以实时访问</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211110203802532.png" alt="web用例设计"></p><p>web用例设计控件的注意点</p><h4 id="app端用例设计"><a href="#app端用例设计" class="headerlink" title="app端用例设计"></a>app端用例设计</h4><p>app端用例设计指的是手机端或者电脑端应用的用例设计，app的更新用户先更新app，才能访问更新后的内容，不过app端的应用会采用webview技术，内嵌网页，这样就可以不更新app，也可以访问最新的内容，app的优点是加快应用的访问速度</p><h4 id="接口用例设计"><a href="#接口用例设计" class="headerlink" title="接口用例设计"></a>接口用例设计</h4><p>接口用例设计就是通过访问url获取数据，验证数据的正确性，web端和app端一些难于操作的或者操作不了的动作，通过接口构造数据，也可以轻松访问。如登录时，必须输入账号密码，一般只在用户端校验数据，不会直接发送不符合要求的数据请求到服务端，通过接口就可以直接发送。</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211109205717909.png" alt="接口测试用例"></p><h5 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h5><p>针对每个版本或每次需求变更后，在正式测试前，对产品或系统的一次简单的验证性测试。</p>]]></content>
      
      
      <categories>
          
          <category> 测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis基本用法</title>
      <link href="/2021/10/26/redis%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/26/redis%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>redis是非关系型数据库，一般也称作缓存数据库，使用c语言开发，读取速度可达10万次每秒</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>docker安装redis</p><blockquote><p><a class="link"   href="https://hub.docker.com/_/redis" >https://hub.docker.com/_/redis<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>参考链接</p><blockquote><p><a class="link"   href="https://cloud.tencent.com/developer/article/1670205" >https://cloud.tencent.com/developer/article/1670205<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="redis数据库"><a href="#redis数据库" class="headerlink" title="redis数据库"></a>redis数据库</h3><p>redis默认支持16个数据库(0-15)，连接时，默认连接到数据库0</p><h4 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config get databases <span class="token comment">#获取数据库的个数,默认16</span><span class="token keyword">select</span> <span class="token number">0</span> <span class="token comment"># 切换到0号数据库，默认使用0号数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h4><p>redis配置文件/ect/redis/redis.conf</p><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token key attr-name">databases</span> <span class="token punctuation">=</span> <span class="token value attr-value">16 # 配置数据库</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="获取配置文件的值"><a href="#获取配置文件的值" class="headerlink" title="获取配置文件的值"></a>获取配置文件的值</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">config get * <span class="token comment"># 获取所有值</span>config get requirepass <span class="token comment"># 获取连接密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="查看存在数据的数据库的信息"><a href="#查看存在数据的数据库的信息" class="headerlink" title="查看存在数据的数据库的信息"></a>查看存在数据的数据库的信息</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">info keyspace<span class="token comment"># 结果</span><span class="token string">"# Keyspacedb0:keys=9,expires=0,avg_ttl=0db1:keys=4,expires=0,avg_ttl=0"</span>数据库0 存在9个键,过期时间0,表示不会过期,平均生存时间0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="过期时间"><a href="#过期时间" class="headerlink" title="过期时间"></a>过期时间</h4><pre class="line-numbers language-none"><code class="language-none"># 查看过期时间ttl key # 返回秒数，-1 或者 0表示不会失效，-2表示已失效pttl key # 返回毫秒数# 设置过期时间expire key seconds # 已存在的key设置setex key seconds value # 不存在的key设置过期时间与value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven基本用法</title>
      <link href="/2021/10/24/maven%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/24/maven%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>maven是一个包管理工具，可一键打包，安装，部署</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>下载</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">weget https://maven.apache.org/download.cgi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解压</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf apache-maven-3.8.2-bin.tar.gz <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置环境变量（/etc/profile）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># /etc/profile文件中添加，/usr/local/apache-maven-3.8.2 解压目录</span><span class="token builtin class-name">export</span> <span class="token assign-left variable">MAVEN_HOME</span><span class="token operator">=</span>/usr/local/apache-maven-3.8.2 <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token variable">$MAVEN_HOME</span>/bin:<span class="token environment constant">$PATH</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>即时生效环境变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> /etc/profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>验证是否成功</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">mvn -v<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>配置镜像加速</p><p>安装目录下 /usr/local/apache-maven-3.8.2</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> conf/settings.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在<mirrors></mirrors>标签中添加内容如下</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrors</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrors</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>消息推送</title>
      <link href="/2021/10/20/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>/2021/10/20/%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>消息推送是平台推出的一种发送消息的方式，通过第三方的api接口，发送消息到第三方的平台上</p><h3 id="平台分类"><a href="#平台分类" class="headerlink" title="平台分类"></a>平台分类</h3><h4 id="微信消息推送"><a href="#微信消息推送" class="headerlink" title="微信消息推送"></a><a class="link"   href="https://wxpusher.zjiecode.com/docs/#/" >微信消息推送<i class="fas fa-external-link-alt"></i></a></h4><p>发送消息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">push_message</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> summary<span class="token operator">=</span><span class="token string">"消息摘要"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> <span class="token string">"http://wxpusher.zjiecode.com/api/send/message"</span>    json <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token string">"appToken"</span><span class="token punctuation">:</span> <span class="token string">""</span><span class="token punctuation">,</span><span class="token comment"># appToken 从官网获取</span>        <span class="token string">"content"</span><span class="token punctuation">:</span> message<span class="token punctuation">,</span> <span class="token comment"># 要发送的消息</span>        <span class="token string">"summary"</span><span class="token punctuation">:</span> summary<span class="token punctuation">,</span><span class="token comment"># 消息摘要</span>        <span class="token string">"contentType"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token string">"topicIds"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"uids"</span><span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token string">""</span><span class="token comment"># 发送的 uid从官网获取</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token string">"url"</span><span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">&#125;</span>    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>json<span class="token operator">=</span>json<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 消息推送 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息推送 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>allure基本用法</title>
      <link href="/2021/10/17/allure%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/17/allure%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>allure是一个自动化测试中常用的插件，支持多种语言，可以生成测试报告，可以集成到jenkins中</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li>安装python</li><li>安装pytest，pip install pytest</li><li>安装pytest整合allure的插件，pip install allure-pytest</li><li>下载<a class="link"   href="https://github.com/allure-framework/allure2/releases" >allure<i class="fas fa-external-link-alt"></i></a>，并添加到环境变量中,allure –version查看是否配置成功</li></ol><h3 id="自动化用例"><a href="#自动化用例" class="headerlink" title="自动化用例"></a>自动化用例</h3><h4 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h4><p>allure中的feature，story，testcase，description用法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> allure<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"百度搜索-模块"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestAllure</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"初始化驱动"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"退出浏览器"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"百度搜索-用例标题"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>testcase</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span><span class="token string">"测试用例地址"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>issue</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span><span class="token string">"测试用例bug地址"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>description</span><span class="token punctuation">(</span><span class="token string">"这也是一个描述"</span><span class="token punctuation">)</span><span class="token comment"># </span>    <span class="token keyword">def</span> <span class="token function">test_baidu_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        这是用例描述，测试百度搜索，如果没有使用@allure.description("这也是一个描述")，        这个注释就是描述，两个是互斥的，注解的优先级高        '''</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__test_allure_report__"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"allure"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>title_contains<span class="token punctuation">(</span><span class="token string">"allure"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>title <span class="token operator">==</span> <span class="token string">"allure_百度搜索"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行用例，查看报告</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest --alluredir<span class="token operator">=</span>./report <span class="token comment">#指定生成json数据目录</span>allure serve ./report<span class="token comment">#运行服务，自动打开报告网页</span><span class="token comment">#或者使用生成的json数据，生成静态文件</span>allure generate path<span class="token punctuation">(</span>json数据路径<span class="token punctuation">)</span> -o path<span class="token punctuation">(</span>静态文件路径<span class="token punctuation">)</span> --clean（clean 参数会覆盖数据） <span class="token comment">#打开报告</span>allure <span class="token function">open</span> -h <span class="token number">127.0</span>.0.1 -p <span class="token number">8080</span> ./report<span class="token comment"># 生成静态文件的好处，如果重新生成静态文件，刷新会展示重新生成的数据，不用重新启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211104160305199.png" alt="代码对应效果图"></p><h4 id="添加用例级别"><a href="#添加用例级别" class="headerlink" title="添加用例级别"></a>添加用例级别</h4><p>运行时可以指定运行哪个级别的用例，统计每个级别的结果</p><p>用例级别</p><ol><li>blocker 阻塞缺陷( 程序崩溃)</li><li>critical 严重缺陷 （功能缺失）</li><li>normal 一般缺陷 （默认，边界情况，格式错误）</li><li>minor 次要缺陷 （界面显示问题）</li><li>trivial 轻微缺陷 （用户体验问题）</li></ol><p>查看allure的级别</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest -h <span class="token comment">#查看帮助，找到如下描述</span><span class="token comment">#--allure-severities=SEVERITIES_SET</span><span class="token comment">#                        Comma-separated list of severity names.</span><span class="token comment">#                        Tests only with these severities will be run.</span><span class="token comment">#                        Possible values are: blocker, critical, normal, minor, trivial.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加严重级别代码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> allure<span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"百度搜索-模块"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestAllure</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"blocker"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_blocker</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        1. blocker 阻塞缺陷( 程序崩溃)        2. critical 严重缺陷 （功能缺失）        3. normal 一般缺陷 （默认，边界情况，格式错误）        4. minor 次要缺陷 （界面显示问题）        5. trivial 轻微缺陷 （用户体验问题）        :return:        """</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"blocker"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_blocker_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">2</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"critical"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_critical</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_normal</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"critical"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_critical_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"normal"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_normal_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"minor"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_minor</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"minor"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_minor_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"trivial"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_trivial</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"trivial"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_trivial_fail</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行用例后，查看统计结果</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211104225841088.png" alt="优先级结果统计图"></p><p>场景：只测blocker, critical级别的用例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest --alluredir<span class="token operator">=</span>./report --clean-alluredir --allure-severities<span class="token operator">=</span>blocker,critical <span class="token comment"># 多个级#别使用逗号隔开,--clean-alluredir指的是清除之前的json数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="添加环境配置说明信息"><a href="#添加环境配置说明信息" class="headerlink" title="添加环境配置说明信息"></a>添加环境配置说明信息</h4><p>allure报告首页，默认显示是没有环境变量，环境变量就是相关的说明，如测试人员，测试环境，版本号等相关信息</p><p>方法一 environment.properties文件</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">python</span><span class="token punctuation">=</span><span class="token attr-value">3.9.0</span><span class="token attr-name">allure</span><span class="token punctuation">=</span><span class="token attr-value">2.13.3</span><span class="token attr-name">author</span><span class="token punctuation">=</span><span class="token attr-value">没有</span><span class="token comment"># key=value形式即可</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>方法二 environment.xml文件</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>environment</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>python<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>3.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parameter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>allure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>2.13.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parameter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parameter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>key</span><span class="token punctuation">></span></span>author<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>key</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>没有<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parameter</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>environment</span><span class="token punctuation">></span></span><span class="token comment">&lt;!--只需要修改key标签和value标签的值即可--></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将其中之一的配置文件放到生成json数据的目录，然后正常运行服务，查看报告即可</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211104235949317.png" alt="环境变量信息图"></p><h4 id="添加测试用例步骤"><a href="#添加测试用例步骤" class="headerlink" title="添加测试用例步骤"></a>添加测试用例步骤</h4><p>对于基于流程的测试用例，可以添加测试步骤说明，阅读起来更明了，例如网上购物步骤包括</p><p>登录-浏览商品-加入购物车-下单-支付</p><p>common.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"浏览"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shopper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"加入购物车"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"支付"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试文件</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> allure<span class="token keyword">from</span> pytest_base<span class="token punctuation">.</span>common <span class="token keyword">import</span> <span class="token operator">*</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"百度搜索-模块"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestAllure</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"冒烟测试"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"blocker"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_smoke_pay</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            login<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"浏览商品"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            browser<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"加入购物车"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            shopper<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            order<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"支付"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            pay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"断言"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>除了这种方法外，还可以在方法上加装饰器</p><p>common.py改为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> allure<span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>step</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>step</span><span class="token punctuation">(</span><span class="token string">"浏览"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">browser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"浏览"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>step</span><span class="token punctuation">(</span><span class="token string">"加入购物车"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">shopper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"加入购物车"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>step</span><span class="token punctuation">(</span><span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>step</span><span class="token punctuation">(</span><span class="token string">"支付"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"支付"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试文件改为</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> allure<span class="token keyword">from</span> pytest_base<span class="token punctuation">.</span>common <span class="token keyword">import</span> <span class="token operator">*</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"百度搜索-模块"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestAllure</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"冒烟测试"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"blocker"</span><span class="token punctuation">)</span>      <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"冒烟测试"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>severity</span><span class="token punctuation">(</span><span class="token string">"blocker"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_smoke_pay</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        login<span class="token punctuation">(</span><span class="token punctuation">)</span>        browser<span class="token punctuation">(</span><span class="token punctuation">)</span>        shopper<span class="token punctuation">(</span><span class="token punctuation">)</span>        order<span class="token punctuation">(</span><span class="token punctuation">)</span>        pay<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">assert</span> <span class="token number">1</span><span class="token operator">==</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="用例描述详解"><a href="#用例描述详解" class="headerlink" title="用例描述详解"></a>用例描述详解</h4><table><thead><tr><th>用法</th><th>范围</th><th>参数说明</th></tr></thead><tbody><tr><td>@allure.epic()</td><td>测试类上</td><td>项目名称</td></tr><tr><td>@allure.feature()</td><td>测试类上</td><td>模块名称</td></tr><tr><td>@allure.story()</td><td>测试方法上</td><td>用户故事(场景描述)</td></tr><tr><td>@allure.title()</td><td>测试方法上</td><td>用例标题</td></tr><tr><td>@allure.testcase()</td><td>测试方法上</td><td>用例地址</td></tr><tr><td>@allure.issue()</td><td>测试方法上</td><td>关联bug地址</td></tr><tr><td>@allure.step()</td><td>测试方法上或方法体中</td><td>用例步骤</td></tr><tr><td>@allure.description()</td><td>测试方法上</td><td>用例描述</td></tr><tr><td>@allure.link()</td><td>测试方法上</td><td>其他关联地址</td></tr><tr><td>@allure.attach()</td><td>方法体中</td><td>报告中添加附件</td></tr></tbody></table><p>test_1.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>epic</span><span class="token punctuation">(</span><span class="token string">"epic项目"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"模块1"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test1</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"story1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"title1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>description</span><span class="token punctuation">(</span><span class="token string">"description1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>issue</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"issue1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>testcase</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"testcase1"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>link</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"link1"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"test1：step1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"test_1"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test_2.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>epic</span><span class="token punctuation">(</span><span class="token string">"epic项目"</span><span class="token punctuation">)</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"模块2"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Test2</span><span class="token punctuation">:</span><span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"story2"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>title</span><span class="token punctuation">(</span><span class="token string">"title2"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>description</span><span class="token punctuation">(</span><span class="token string">"description2"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>issue</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"issue2"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>testcase</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"testcase2"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>link</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"link2"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_2</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"test2：step1"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"test_2"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行并打开报告</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest -vs test_1.py test_2.py --alluredir<span class="token operator">=</span>./report --clean-alluredir <span class="token comment"># 生成json数据</span>allure serve ./report <span class="token comment">#打开报告</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211105160724012.png" alt="用例详细描述图"></p><p>参数命令行</p><p>使用pytest -h可找到如下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">--allure-severities<span class="token operator">=</span>SEVERITIES_SET                        Comma-separated list of severity names. Tests only                        with these severities will be run. Possible values                        are: blocker, critical, normal, minor, trivial.--allure-epics<span class="token operator">=</span>EPICS_SET                        Comma-separated list of epic names. Run tests that                        have at least one of the specified feature labels.--allure-features<span class="token operator">=</span>FEATURES_SET                        Comma-separated list of feature names. Run tests that                        have at least one of the specified feature labels.--allure-stories<span class="token operator">=</span>STORIES_SET                        Comma-separated list of story names. Run tests that                        have at least one of the specified story labels.--allure-link-pattern<span class="token operator">=</span>LINK_TYPE:LINK_PATTERN                        Url pattern <span class="token keyword">for</span> <span class="token function">link</span> type. Allows short links <span class="token keyword">in</span> test,                        like <span class="token string">'issue-1'</span><span class="token builtin class-name">.</span> Text will be formatted to full url                        with python str.format<span class="token punctuation">(</span><span class="token punctuation">)</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只运行指定的story</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest -vs test_1.py test_2.py --allure-stories<span class="token operator">=</span><span class="token string">"story1,story2"</span> --alluredir<span class="token operator">=</span>./report --clean-alluredir <span class="token comment">#运行@allure.story("story2")或者@allure.story("story1")的测试方法，多个story用逗号隔开</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="报告中添加附件"><a href="#报告中添加附件" class="headerlink" title="报告中添加附件"></a>报告中添加附件</h4><p>allure支持在报告中添加文本，html，图片，文件，视频</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">import</span> os<span class="token keyword">import</span> allure<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>feature</span><span class="token punctuation">(</span><span class="token string">"模块"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">TestAllureAttach</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"初始化驱动"</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com/"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>         logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"退出浏览器"</span><span class="token punctuation">)</span>         self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>story</span><span class="token punctuation">(</span><span class="token string">"百度搜索-用例标题"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>testcase</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"测试用例地址"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>issue</span><span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"测试用例bug地址"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@allure<span class="token punctuation">.</span>description</span><span class="token punctuation">(</span><span class="token string">"这也是一个描述"</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu_search</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        这是用例描述，测试百度搜索        '''</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"__test_allure_report__"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"allure"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>ID<span class="token punctuation">,</span> <span class="token string">"su"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>        WebDriverWait<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>title_contains<span class="token punctuation">(</span><span class="token string">"allure"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"添加文件"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>            allure<span class="token punctuation">.</span>attach<span class="token punctuation">.</span><span class="token builtin">file</span><span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>path<span class="token punctuation">,</span><span class="token string">"pytest.ini"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"pytest.ini"</span><span class="token punctuation">,</span>allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"添加网页"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            allure<span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">"&lt;h2>这是网页内容&lt;/h2>"</span><span class="token punctuation">,</span><span class="token string">"添加网页"</span><span class="token punctuation">,</span>allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>HTML<span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"添加文本"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            allure<span class="token punctuation">.</span>attach<span class="token punctuation">(</span><span class="token string">"这是文本内容"</span><span class="token punctuation">,</span><span class="token string">"添加文本"</span><span class="token punctuation">,</span>allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>TEXT<span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"添加截图"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            allure<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"添加截图"</span><span class="token punctuation">,</span>allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">"断言"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>title <span class="token operator">==</span> <span class="token string">"allure_百度搜索"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211105174953269.png" alt="添加附件截图"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a class="link"   href="https://www.cnblogs.com/yoyoketang/tag/pytest/default.html?page=4" >https://www.cnblogs.com/yoyoketang/tag/pytest/default.html?page=4<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 自动化测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> allure </tag>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2021/10/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/10/16/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>linux是一个开源的系统</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="文件传输"><a href="#文件传输" class="headerlink" title="文件传输"></a>文件传输</h4><p>上传文件</p><blockquote><p>scp 要上传的文件路径 username@ip:目标路径</p><p>如果是文件夹，加参数scp -r 要上传的文件路径 username@ip:目标路径</p></blockquote><p>下载文件</p><blockquote><p>scp username@ip:服务器文件路径 下载到的文件路径</p><p>如果是文件夹，加参数scp -r username@ip:服务器文件路径 下载到的文件路径</p></blockquote><h4 id="查找文件"><a href="#查找文件" class="headerlink" title="查找文件"></a>查找文件</h4><p>find -name filename    查找当前目录及其子目录下的文件</p><h4 id="linux三剑客"><a href="#linux三剑客" class="headerlink" title="linux三剑客"></a>linux三剑客</h4><p>grep</p><p>awk</p><p>sed</p><p>修改文件属性</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chgrp</span> groupname filename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sort</span> -k <span class="token number">1</span> -r -n<span class="token comment"># -k指定列数 -r 反序，默认降序,-n 按照数值大小排序，默认按照ASCII字符大小排序 ，如果是字符串，只比较第一个# 字符 -t分割符，默认是空格</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="vi快捷键"><a href="#vi快捷键" class="headerlink" title="vi快捷键"></a><a class="link"   href="http://vimcdoc.sourceforge.net/doc/help.html" >vi快捷键<i class="fas fa-external-link-alt"></i></a></h4><p>vi有三个模式</p><ol><li>命令行模式 </li><li>末行模式</li><li>编辑模式</li></ol><p>任何模式下按下esc都会回到命令行模式</p><p>vi 命令打开文件时，进入命令行模式</p><p>在命令行模式下，按下:会切换到末行模式</p><p>命令行模式下按下i进入插入模式(编辑模式)</p><h5 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h5><blockquote><p>gg 光标回到首行</p><p>shift+g 光标回到尾行</p><p>ngg 光标回到第一行</p><p>shift+4 光标回到行首</p><p>shift+6 光标回到行尾</p><p>nyy 复制n行</p><p>p 粘贴</p></blockquote><h5 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h5><blockquote><p>查看文件格式，windows，max，linux下，换行的格式是不一样的，windows是\r\n,max是\r,linux是\n</p><p>:set ff? </p><p>修改文件格式</p><p>:set ff=unix</p><p>替换</p><p>:%s/old/new/g     %范围是整个文件s查找 old 查找的内容 new 替换成new g 全局</p><p>:2,15s/old/new/g 只替换2到15行的内容</p><p>查找</p><p>:/string 查找内容string，按下enter后，光标回到文件首行，n定位下一个找到的内容，N定位上一个找到的内容</p></blockquote><h4 id="格式化日期"><a href="#格式化日期" class="headerlink" title="格式化日期"></a>格式化日期</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">date</span> +%Y%m%d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zcvf traget.tar.gz 要压缩的目录或文件 <span class="token comment"># 压缩</span><span class="token function">tar</span> -zxvf filename -C path<span class="token comment"># 解压到指定目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><h4 id="变量的引用"><a href="#变量的引用" class="headerlink" title="变量的引用"></a>变量的引用</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">2</span><span class="token assign-left variable">j</span><span class="token operator">=</span><span class="token number">3</span><span class="token builtin class-name">echo</span> <span class="token variable">$i</span>,<span class="token variable">$&#123;j&#125;</span>,$<span class="token punctuation">[</span>i*j<span class="token punctuation">]</span>,<span class="token variable"><span class="token variable">$((</span>i<span class="token operator">*</span>j<span class="token variable">))</span></span><span class="token comment"># 变量引用可用$变量名，$&#123;变量名&#125;</span><span class="token comment"># 当要计算引用两个变量的算数值可用$[变量名+变量名],</span><span class="token comment">#$((变量名+变量名))</span><span class="token assign-left variable">array</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">4</span>  <span class="token number">5</span> <span class="token number">4</span><span class="token punctuation">)</span>array<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span> <span class="token comment">#赋值</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>0<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 获取第一个值</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>-1<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 获取最后一个值</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 获取所有值</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 获取所有值</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>*<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 数组长度</span><span class="token builtin class-name">echo</span> <span class="token variable">$&#123;<span class="token operator">#</span>array<span class="token punctuation">[</span>@<span class="token punctuation">]</span>&#125;</span> <span class="token comment"># 数组长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取命令执行结果"><a href="#获取命令执行结果" class="headerlink" title="获取命令执行结果"></a>获取命令执行结果</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">echo</span> <span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span><span class="token comment"># 飘号表示可执行命令</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>执行表达式，不需要$引用变量</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">i</span><span class="token operator">=</span><span class="token number">0</span><span class="token builtin class-name">let</span> <span class="token assign-left variable">i</span><span class="token operator">+=</span><span class="token number">1</span> <span class="token comment"># 相当于i = $[i+1]</span><span class="token builtin class-name">echo</span> <span class="token variable">$i</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="统计当前-Linux-系统中可以登录计算机的账户有多少个"><a href="#统计当前-Linux-系统中可以登录计算机的账户有多少个" class="headerlink" title="统计当前 Linux 系统中可以登录计算机的账户有多少个"></a>统计当前 Linux 系统中可以登录计算机的账户有多少个</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">grep</span> <span class="token string">"bash$"</span> /etc/passwd <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token comment"># $ 匹配结尾 wc -l 统计行数</span><span class="token comment">#或者</span><span class="token function">awk</span> -F<span class="token string">':'</span> <span class="token string">'$7~/bash$/ &#123;print $1&#125;'</span> /etc/passwd <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token comment"># -F 指定分隔符 $7~ 指定匹配的列数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取执行时的参数"><a href="#获取执行时的参数" class="headerlink" title="获取执行时的参数"></a>获取执行时的参数</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># bash args.sh 1 2</span><span class="token builtin class-name">echo</span> <span class="token variable">$0</span>,<span class="token variable">$1</span>,<span class="token variable">$2</span><span class="token comment">#结果 args.sh,1,2</span><span class="token comment">#./args.sh 1 2</span><span class="token comment">#结果 ./args.sh,1,2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="备份日志"><a href="#备份日志" class="headerlink" title="备份日志"></a>备份日志</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 备份日志 飘号里是命令，获取格式化的日期</span><span class="token function">tar</span> -zcvf log-<span class="token variable"><span class="token variable">`</span><span class="token function">date</span> +%Y%m%d<span class="token variable">`</span></span>.tar.gz /var/log<span class="token comment"># 添加定时任务 crontab -l 查看定时任务</span><span class="token function">crontab</span> -e<span class="token comment">#在打开的文件中添加如下命令,表示每分钟执行一次</span>* * * * * /home/logback.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定时任务参考链接</p><blockquote><p><a class="link"   href="http://c.biancheng.net/view/1092.html" >http://c.biancheng.net/view/1092.html<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="当前用户是否超级管理员"><a href="#当前用户是否超级管理员" class="headerlink" title="当前用户是否超级管理员"></a>当前用户是否超级管理员</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token environment constant">$USER</span> <span class="token operator">==</span> <span class="token string">'root'</span> <span class="token punctuation">]</span> <span class="token comment"># 判断当前用户是否是管理员$UID -eq 0</span><span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">'管理员'</span><span class="token keyword">else</span>    <span class="token builtin class-name">echo</span> <span class="token string">'非管理员'</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token builtin class-name">echo</span> -ne <span class="token string">"<span class="token entity" title="\033">\033</span>[?25l"</span> <span class="token comment"># 隐藏光标</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">..</span><span class="token number">100</span><span class="token punctuation">&#125;</span><span class="token keyword">do</span>        <span class="token builtin class-name">echo</span> -e <span class="token string">"<span class="token variable">$i</span>%<span class="token entity" title="\033">\033</span>[1A"</span> <span class="token comment">#\033[1A 回到行首</span>        <span class="token function">sleep</span> <span class="token number">0.1</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置pip镜像加速"><a href="#配置pip镜像加速" class="headerlink" title="配置pip镜像加速"></a>配置pip镜像加速</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> ~<span class="token function">mkdir</span> .pip<span class="token builtin class-name">cd</span> .pip<span class="token builtin class-name">echo</span> <span class="token punctuation">[</span>global<span class="token punctuation">]</span><span class="token operator">></span>pip.conf<span class="token builtin class-name">echo</span> index-url<span class="token operator">=</span>https://mirrors.aliyun.com/pypi/simple/ <span class="token operator">>></span>pip.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="配置docker镜像加速"><a href="#配置docker镜像加速" class="headerlink" title="配置docker镜像加速"></a>配置docker镜像加速</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/docker<span class="token comment"># 如果已经存在daemon.json文件，会覆盖文件内容</span><span class="token builtin class-name">echo</span> <span class="token punctuation">&#123;</span><span class="token string">"registry-mirrors"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span><span class="token string">"https://docker.mirrors.ustc.edu.cn"</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span> <span class="token operator">></span>daemon.json<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker基本用法</title>
      <link href="/2021/10/16/docker%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/16/docker%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Docker 是一个开源的应用容器引擎，基于 Go 语言 并遵从 Apache2.0 协议开源。<br>Docker 可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。<br>容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p><h3 id="docker容器技术"><a href="#docker容器技术" class="headerlink" title="docker容器技术"></a>docker容器技术</h3><h4 id="docker优点"><a href="#docker优点" class="headerlink" title="docker优点"></a>docker优点</h4><p>docker可以用来快速交付应用。加快打包时间，加快测试，加快发布，缩短开发以及运行代码之间的周期<br>复杂环境管理，应用隔离：不同软件运行环境兼容依赖问题，开发/测试/线上环境保持一致<br>轻量级：对于系统内核来说，一个docker只是一个进程，一个系统可以运行上千个容器</p><h4 id="docker镜像仓库"><a href="#docker镜像仓库" class="headerlink" title="docker镜像仓库"></a>docker镜像仓库</h4><blockquote><p><a class="link"   href="https://hub.docker.com/" >https://hub.docker.com/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><p>参考链接：</p><blockquote><p><a class="link"   href="https://ceshiren.com/t/topic/5526" >https://ceshiren.com/t/topic/5526<i class="fas fa-external-link-alt"></i></a></p><p>查看配置docker镜像加速是否成功<br>docker info<br>显示内容中包含Registry Mirrors:你配置的镜像地址，说明配置成功。</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><h5 id="设置开机启动"><a href="#设置开机启动" class="headerlink" title="设置开机启动"></a>设置开机启动</h5><p>systemctl enable docker</p><h5 id="日志相关"><a href="#日志相关" class="headerlink" title="日志相关"></a>日志相关</h5><p>docker logs container 查看容器的日志</p><p>docker logs container -f 动态查看日志</p><p>docker logs container -t 显示时间戳</p><p>docker logs container –tail  n只显示最后n行</p><h5 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h5><p>docker cp filepath container:filepath  复制本地文件到容器</p><p>docker cp container:filepath filepath 容器文件复制到本地</p><h5 id="加载卷相关"><a href="#加载卷相关" class="headerlink" title="加载卷相关"></a>加载卷相关</h5><p>加载卷就是在本地指定位置创建文件夹，便于文件路径映射的管理</p><p>docker volume create  创建加载卷</p><p>docker volume ls 查看当前创建的加载卷</p><p>docker volume rm 删除加载卷</p><p>docker volume inspect 查看加载卷详细信息</p><h5 id="容器交互"><a href="#容器交互" class="headerlink" title="容器交互"></a>容器交互</h5><p>docker exec -it -u root container bash    进入容器内部，-u root 以管理员身份进入</p><h3 id="安装容器实例"><a href="#安装容器实例" class="headerlink" title="安装容器实例"></a>安装容器实例</h3><h4 id="禅道"><a href="#禅道" class="headerlink" title="禅道"></a>禅道</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull idoop/zentao <span class="token comment"># 拉取镜像</span><span class="token function">mkdir</span> -p /data/zbox <span class="token comment">#创建映射的文件夹</span>docker run -d -p <span class="token number">9999</span>:80 -p <span class="token number">3306</span>:3306 -e <span class="token assign-left variable"><span class="token environment constant">USER</span></span><span class="token operator">=</span><span class="token string">"admin"</span> -e <span class="token assign-left variable">PASSWD</span><span class="token operator">=</span><span class="token string">"admin"</span> -e <span class="token assign-left variable">BIND_ADDRESS</span><span class="token operator">=</span><span class="token string">"false"</span> -e <span class="token assign-left variable">SMTP_HOST</span><span class="token operator">=</span><span class="token string">"163.177.90.125 smtp.exmail.qq.com"</span> -v /data/zbox/:/opt/zbox/ --name zentao-server idoop/zentao:latest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="jenkins"><a href="#jenkins" class="headerlink" title="jenkins"></a>jenkins</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">docker pull jenkins/jenkins:lts <span class="token comment">#拉取镜像lts(最稳定版本)版本</span>docker volume create jenkins <span class="token comment">#创建压缩卷，就是在默认的路径创建一个文件夹</span>docker run -d --name jenkins -p <span class="token number">8080</span>:8080 -p <span class="token number">50000</span>:50000 -e <span class="token assign-left variable">JAVA_OPTS</span><span class="token operator">=</span>-Duser.timezone<span class="token operator">=</span>Asia/Shanghai -v jenkins:/var/jenkins_home jenkins/jenkins:lts    <span class="token comment">#部署并运行镜像，-d 后台运行 --name 镜像起名 -p 端口映射 -e 传递参数给镜像，这里是指定运行的时区 -v 文件#路径映射，映射后，即使删掉部署的镜像，数据不会丢失</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="Exception-caught"><a href="#Exception-caught" class="headerlink" title="Exception caught"></a>Exception caught</h4><blockquote><p>Failed to execute goal com.spotify:docker-maven-plugin:1.2.2:build (build-image) :Exception caught</p></blockquote><p>原因：docker 没有开启2375远程访问docker功能</p><p>修改 /usr/lib/systemd/system/docker.service 文件，添加如下内容：</p><blockquote><p>-H tcp://0.0.0.0:2375 -H unix:///var/run/docker.sock</p></blockquote><p>重启 Docker：</p><blockquote><p>systemctl daemon-reload<br>service docker restart</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
          <category> 持续交付 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pytest基本用法</title>
      <link href="/2021/10/15/pytest%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/15/pytest%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>pytest是python的第三方模块，用于自动化测试</p><p>接口自动化测试：pytest+requests+allure</p><p>webui自动化测试：pytest+selenium+allure</p><p>app自动化测试：pytest+appium+allure</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h4><ul><li>已安装python</li><li>已安装pip(python的模块，安装python时自动安装)</li></ul><h4 id="安装pytest"><a href="#安装pytest" class="headerlink" title="安装pytest"></a>安装pytest</h4><ul><li>pip install pytest</li></ul><h4 id="查看是否安装成功"><a href="#查看是否安装成功" class="headerlink" title="查看是否安装成功"></a>查看是否安装成功</h4><ul><li>windows：pip list | findstr pytest</li><li>mac : pip list | grep pytest</li></ul><h4 id="测试用例的识别与运行"><a href="#测试用例的识别与运行" class="headerlink" title="测试用例的识别与运行"></a>测试用例的识别与运行</h4><h5 id="测试文件"><a href="#测试文件" class="headerlink" title="测试文件"></a>测试文件</h5><ul><li>test_*.py或者*_test.py</li></ul><h5 id="用例识别"><a href="#用例识别" class="headerlink" title="用例识别"></a>用例识别</h5><ul><li>Test*类包含的所有test_*方法(测试类不能带有_init_方法)</li><li>不在class中的所有的test_*方法，不能识别*_test方法</li><li>pytest也可以执行unittest框架写的用例和方法</li><li>所有的包必须有__init__.py</li></ul><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p>查看帮助文档</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest -hpytest --help<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h5 id="执行用例"><a href="#执行用例" class="headerlink" title="执行用例"></a>执行用例</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest 执行当前目录及其子目录下所有符合要求的用例pytest *.py 执行指定某个测试文件pytest 文件名/ 执行某个目录下的测试文件pytest -m smoke 运行@pytest.mark.smoke 标志的用例<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h5 id="遇到错误时停止"><a href="#遇到错误时停止" class="headerlink" title="遇到错误时停止"></a>遇到错误时停止</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pytest -x 遇到一个错误就停止运行pytest --maxfail<span class="token operator">=</span><span class="token number">2</span> 遇到错误达到指定数2时停止运行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="注意调用顺序"><a href="#注意调用顺序" class="headerlink" title="注意调用顺序"></a>注意调用顺序</h4><p>setup_module&gt;setup_class&gt;setup_method&gt;setup&gt;teardown&gt;teardown_method&gt;teardown_class&gt;teardown_module</p><p>一般setup_method与setup选择其中一个即可，都是方法调用之前调用</p><h4 id="pytest-ini"><a href="#pytest-ini" class="headerlink" title="pytest.ini"></a><a class="link"   href="https://docs.pytest.org/en/6.2.x/logging.html?highlight=pytest%20ini" >pytest.ini<i class="fas fa-external-link-alt"></i></a></h4><pre class="line-numbers language-ini" data-language="ini"><code class="language-ini"><span class="token header"><span class="token punctuation">[</span><span class="token section-name selector">pytest</span><span class="token punctuation">]</span></span><span class="token key attr-name">log_cli</span> <span class="token punctuation">=</span> <span class="token value attr-value">true</span><span class="token key attr-name">log_level</span> <span class="token punctuation">=</span> <span class="token value attr-value">info</span><span class="token key attr-name">log_date_format</span> <span class="token punctuation">=</span> <span class="token value attr-value">%Y-%m-%d %H:%M:%S</span><span class="token key attr-name">log_format</span> <span class="token punctuation">=</span> <span class="token value attr-value">%(asctime)s (%(filename)s:%(lineno)s) %(levelname)-8s %(message)s</span><span class="token key attr-name">addopts</span><span class="token punctuation">=</span><span class="token value attr-value">-vs --alluredir=./report --clean-alluredir</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>pytest -h 可查看相关key</p><p>log_cli 表示控制台实时打印日志,默认false</p><p>log_cli_level与log_level的区别，cli指的是客户端的控制台，<strong>没有cli的优先级比较大</strong>，log_level，配合allure，表示allure的日志输出等级,日志的级别有debug&gt;info&gt;warning&gt;error，设置最大时，所有日志都会打印，默认warning</p><p>addopts表示执行执行pytest 后的参数，-s 控制台显示print打印的信息，allure不会收集stout信息, –alluredir=./report allure报告相关数据的生成位置，–clean-alluredir 清空之前的数据</p><h4 id="Template替换yaml中变量"><a href="#Template替换yaml中变量" class="headerlink" title="Template替换yaml中变量"></a>Template替换yaml中变量</h4><p>Template基础</p><p>$变量名 或者${变量名}（推荐使用）都可以替换safe_substitute方法只替换传入的变量，没有传入的保持默认，如下面的$what，另一个方法substitute，必须传入对应的参数，否则会报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> Templatetemplate <span class="token operator">=</span> Template<span class="token punctuation">(</span><span class="token string">"$what is your name? i am $&#123;name&#125;"</span><span class="token punctuation">)</span> <span class="token comment"># 创建Template对象</span>name <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"meng"</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>template<span class="token punctuation">.</span>safe_substitute<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="hook函数"><a href="#hook函数" class="headerlink" title="hook函数"></a>hook函数</h4><p><strong>项目根路径的conftest.py文件中</strong></p><h5 id="用例名称与路径支持中文"><a href="#用例名称与路径支持中文" class="headerlink" title="用例名称与路径支持中文"></a>用例名称与路径支持中文</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># from _pytest import hookspec 存在_pytest下的hookspec文件中，pycharme在site-package下</span><span class="token keyword">def</span> <span class="token function">pytest_collection_modifyitems</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> config<span class="token punctuation">,</span> items<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        <span class="token comment"># item.name 用例的名字</span>        item<span class="token punctuation">.</span>name <span class="token operator">=</span> item<span class="token punctuation">.</span>name<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'unicode-escape'</span><span class="token punctuation">)</span>        <span class="token comment"># item.nodeid 用例的路径</span>        item<span class="token punctuation">.</span>_nodeid <span class="token operator">=</span> item<span class="token punctuation">.</span>nodeid<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'unicode-escape'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="用例执行失败自动截图"><a href="#用例执行失败自动截图" class="headerlink" title="用例执行失败自动截图"></a>用例执行失败自动截图</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 从runner点进去,搜索pytest_runtest_makereport,连续点击后进入listener文件中，复制函数，此函数会被执行# 三次，分别是setup，call，teardown，call就是要执行的用例，截图需要driver，就是需要一个工具类获driver</span><span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>hookimpl</span><span class="token punctuation">(</span>hookwrapper<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pytest_runtest_makereport</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> call<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    获取每个用例状态的钩子函数    :param item:    :param call:    :return:    '''</span>    <span class="token comment"># 获取钩子方法的调用结果,这是原函数中的语句</span>    report <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">yield</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_result<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 仅仅获取用例call 执行结果是失败的情况, 不包含 setup/teardown</span>    <span class="token keyword">if</span> report<span class="token punctuation">.</span>when <span class="token operator">==</span> <span class="token string">"call"</span> <span class="token keyword">and</span> report<span class="token punctuation">.</span>failed<span class="token punctuation">:</span>        <span class="token keyword">with</span> allure<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token string">'添加失败截图...'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            allure<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>DriverUtil<span class="token punctuation">.</span>get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_screenshot_as_png<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"失败截图"</span><span class="token punctuation">,</span> allure<span class="token punctuation">.</span>attachment_type<span class="token punctuation">.</span>PNG<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><blockquote><p><a class="link"   href="https://ceshiren.com/t/topic/4016" >https://ceshiren.com/t/topic/4016<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 模块 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> pytest </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>charles基本用法</title>
      <link href="/2021/10/14/charles%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/14/charles%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>charles是一个抓包工具，可以mock数据，包括rewrite，map local，map remote，对请求和响应进行修改</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> charles </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基本用法</title>
      <link href="/2021/10/14/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/14/python%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>python是一种脚本语言，应用领域广泛</p><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>注释只是起到<em>说明作用，不会做任何语法的检测</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fun</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">str</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''注释'''</span>    <span class="token comment"># 这是单行注释</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"函数参数，返回值注释内容:"</span><span class="token punctuation">,</span> fun<span class="token punctuation">.</span>__annotations__<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"多行注释内容:"</span><span class="token punctuation">,</span>fun<span class="token punctuation">.</span>__doc__<span class="token punctuation">)</span>    <span class="token keyword">return</span> a<span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span> 说明返回值是<span class="token builtin">str</span>类型a<span class="token punctuation">:</span><span class="token builtin">str</span> 说明a的类型是<span class="token builtin">str</span><span class="token punctuation">,</span>在pycharme中有提示<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><h4 id="列表推导式"><a href="#列表推导式" class="headerlink" title="列表推导式"></a>列表推导式</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 列表推导式只是简化代码的作用</span><span class="token comment"># 它的结构是在一个中括号里包含一个表达式，然后是一个for语句，然后是 0 个或多个 for 或者 if 语句</span><span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>y <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># x*2+y 表示生成每个元素的表达式，x，y必须是for语句的变量</span><span class="token comment"># 这个表达式相当于如下代码</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> y <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span>y<span class="token punctuation">)</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="通过下标删除列表元素"><a href="#通过下标删除列表元素" class="headerlink" title="通过下标删除列表元素"></a>通过下标删除列表元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token comment"># 要删除的元素只有一个</span>data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 删除data[1]</span><span class="token comment"># 要删除的元素有多个，通过计数，刷新要删除的元素的下标</span>index <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token comment"># data要删除元素的下标</span>counter <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> index<span class="token punctuation">:</span>    i <span class="token operator">-=</span> counter    data<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    counter <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 普通函数，计算两个数的和</span><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token comment"># lambda 匿名函数，lambda 是关键字，x,y是可选参数列表，x+y是返回值，表达式中的变量必须在可选列表中</span><span class="token comment"># 在函数相对简单时，可以简化成匿名函数</span><span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span>y<span class="token punctuation">:</span>x<span class="token operator">+</span>y<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>捕捉异常并打印详细信息</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> traceback<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>       i <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n-----------start----------"</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>traceback<span class="token punctuation">.</span>format_exc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n-----------end----------"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="日期操作"><a href="#日期操作" class="headerlink" title="日期操作"></a>日期操作</h3><h4 id="格式化时间"><a href="#格式化时间" class="headerlink" title="格式化时间"></a>格式化时间</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span> <span class="token comment">#2021-10-14 23:17:10</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="获取秒数"><a href="#获取秒数" class="headerlink" title="获取秒数"></a>获取秒数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#1634224828.3204484</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>*args(arg只是一个规范的命名)接收的是可变参数value,是一个元组，传入的参数会被放进元组里<br>**kwargs(kwargs只是一个规范的命名)接受的参数是key=value的可变参数,是一个字典，传入的参数以键值对的形式存放到字典里。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">params</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment"># 元组</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">params_kwargs</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    params<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>    params_kwargs<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于可变参数的解包,解包是在作为参数传递的时候使用的</p><p>*args使用的解包是*args，**kwargs的解包是**kwargs</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>               <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>            <span class="token builtin">sum</span> <span class="token operator">+=</span> i        <span class="token keyword">return</span> <span class="token builtin">sum</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>        b <span class="token operator">=</span> kwargs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>    su <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"a"</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token operator">*</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 相当于sum(1,2)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token operator">**</span>su<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 相当于sub(a=1,b=2)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="命令行参数解析"><a href="#命令行参数解析" class="headerlink" title="命令行参数解析"></a>命令行参数解析</h3><p><strong>getopt——C风格命令行解析</strong></p><p>命令行参数分为短参数和长参数</p><p>python -h 其中-h就是短参数</p><p>python –help 中的–help就是长参数</p><blockquote><p>getopt(args, shortopts, longopts = [])<br>args:数组，一般使用sys.argv[1:]获取<br>shortopts:字符串类型，短参数, pytest -o file -v  -s a b c,则字符串可写成’vo:s:’  ，意思就是v独自一组，o:是表示o后面的是和o一组，s:和o类似<br>longopts：数组，长参数，以–开头的参数，如–condition=foo，也可以写成–condition  foo，例子–condition=foo –testing –output-file 1.out参数写成[“condition=”，“testing”，“output-file”],其中condition=中的=表示后面的元素是一组，–要去掉</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> getopt<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    command <span class="token operator">=</span> <span class="token string">"--condition=foo --testing --output-file 1.out -a -bfoo -d a1 a2"</span>    args <span class="token operator">=</span> command<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span>    opts<span class="token punctuation">,</span>args <span class="token operator">=</span> getopt<span class="token punctuation">.</span>getopt<span class="token punctuation">(</span>args<span class="token punctuation">,</span><span class="token string">'ab:d:'</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"condition="</span><span class="token punctuation">,</span><span class="token string">"testing"</span><span class="token punctuation">,</span><span class="token string">"output-file="</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>opts<span class="token punctuation">)</span><span class="token comment">#[('--condition', 'foo'), ('--testing', ''), ('--output-file', '1.out'), </span>    <span class="token comment">#('-a', ''), ('-b', 'foo'), ('-d', 'a1')]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token comment">#['a2']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h3><p>装饰器包括函数装饰器，类装饰器，装饰器的作用是改变装饰的函数或者类的运行方式，比如在执行函数的时候，先执行输出日志，连接数据库等前置操作，或者执行函数之后，输出函数运行时间等后置操作</p><h4 id="无参函数装饰器"><a href="#无参函数装饰器" class="headerlink" title="无参函数装饰器"></a>无参函数装饰器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token comment"># 当一个函数作为装饰器时，必须有一个参数，这个参数是使用装饰器的对象，</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token comment"># 防止使用装饰器的函数的__name__ 和__doc__属性被装饰器取代</span>    <span class="token comment"># 如果不加@wraps(func)，order中调用order.__name__ 结果是inner</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span>        fun<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#调用传过来的函数</span>    <span class="token keyword">return</span> inner<span class="token comment"># 当一个函数使用装饰器时，该函数不会被执行，该函数会被传到装饰器中，由装饰器执行，如果装饰器不调用，则该函数</span><span class="token comment">#不会被调用</span><span class="token decorator annotation punctuation">@login</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"下单"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    order<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="带参函数装饰器"><a href="#带参函数装饰器" class="headerlink" title="带参函数装饰器"></a>带参函数装饰器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> wraps<span class="token comment"># 当一个函数作为装饰器时，必须有一个参数，这个参数是使用装饰器的对象，</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>fun<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span> <span class="token comment"># 防止使用装饰器的函数的__name__ 和__doc__属性被装饰器取代</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''inner doc'''</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"登录"</span><span class="token punctuation">)</span>        fun<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token comment">#调用传过来的函数</span>    <span class="token keyword">return</span> inner<span class="token comment"># 当一个函数使用装饰器时，该函数不会被执行，该函数会被传到装饰器中，</span><span class="token comment"># 由装饰器执行，如果装饰器不调用，则该函数不会被调用</span><span class="token decorator annotation punctuation">@login</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''order注释'''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"下单</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token interpolation"><span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span>__doc__<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    order<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类装饰器"><a href="#类装饰器" class="headerlink" title="类装饰器"></a>类装饰器</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">T</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        接收@T(1.5, kw="kw")中的参数，如果是@T()，没有参数，可不写__init__函数        '''</span>        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args        self<span class="token punctuation">.</span>kwargs <span class="token operator">=</span> kwargs    <span class="token keyword">def</span> <span class="token function">__call__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''接收调用者的函数对象'''</span>        <span class="token decorator annotation punctuation">@wraps</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token triple-quoted-string string">'''            接收调用者的函数参数            '''</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"登录--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>args<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>args<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>self<span class="token punctuation">.</span>kwargs<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>kwargs<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        <span class="token keyword">return</span> inner<span class="token decorator annotation punctuation">@T</span><span class="token punctuation">(</span><span class="token number">1.5</span><span class="token punctuation">,</span> kw<span class="token operator">=</span><span class="token string">"kw"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">order</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''order doc'''</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"下单</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">id</span><span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span>__doc__<span class="token punctuation">&#125;</span></span><span class="token string">--</span><span class="token interpolation"><span class="token punctuation">&#123;</span>order<span class="token punctuation">.</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    order<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>name<span class="token operator">=</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment">#登录--(1.5,)--(1,)--&#123;'kw': 'kw'&#125;--&#123;'name': 'name'&#125;</span><span class="token comment">#下单id:1--name--order doc--order</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符串操作"><a href="#字符串操作" class="headerlink" title="字符串操作"></a>字符串操作</h3><h4 id="去除空白字符"><a href="#去除空白字符" class="headerlink" title="去除空白字符"></a>去除空白字符</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">s<span class="token operator">=</span><span class="token string">"\r\t\n\x00this is content\x00\x00\r\t"</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># s.strip()只能去掉开头和结尾的\r\t\n,\x00需要.strip(b'\x00'.decode())去掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="格式化字符串"><a href="#格式化字符串" class="headerlink" title="格式化字符串"></a>格式化字符串</h4><p>参考链接</p><blockquote><p><a class="link"   href="https://www.runoob.com/python/att-string-format.html" >https://www.runoob.com/python/att-string-format.html<i class="fas fa-external-link-alt"></i></a></p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 0:>20 0表示位置，> 右对齐，宽度20，</span>g_format <span class="token operator">=</span> <span class="token string">"&#123;0:>20&#125;\t&#123;1:>20&#125;\t&#123;2:>20&#125;"</span>g_format<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token string">"网站"</span><span class="token punctuation">,</span><span class="token string">"用户"</span><span class="token punctuation">,</span><span class="token string">"密码"</span><span class="token punctuation">)</span><span class="token comment"># 效果</span><span class="token comment">#                  网站                  用户                  密码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><h4 id="获取项目根路径"><a href="#获取项目根路径" class="headerlink" title="获取项目根路径"></a>获取项目根路径</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>realpath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="新建文件夹"><a href="#新建文件夹" class="headerlink" title="新建文件夹"></a>新建文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="遍历文件和文件夹"><a href="#遍历文件和文件夹" class="headerlink" title="遍历文件和文件夹"></a>遍历文件和文件夹</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token triple-quoted-string string">'''os.walk()返回生成器，生成器每个元素是一个列表，列表包含三个元素，第一个是路径，第二个是路径包含的目录名称列表，第三个是路径包含的文件名称列表'''</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    dirpath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    filepath <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>walk<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span><span class="token string">'D:\\software\\blog\source\\'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dirpath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                filepath<span class="token punctuation">.</span>append<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 输出所有目录绝对路径</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> dirpath<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 输出所有文件绝对路径</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> filepath<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><h4 id="global"><a href="#global" class="headerlink" title="global"></a>global</h4><p>声明一个变量是全局变量，一般情况是要改变全局变量的值之前，需要声明变量，否则会报错</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> x <span class="token comment"># 由于需要修改全局变量，如果注释这句，执行会报错</span>    x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    a<span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h4><p>yield是返回的作用，代码第一次执行到yield会返回，第二次执行时，会执行yield之后的代码，当函数中存在yield，函数会被当成是一个生成器，生成器可以使用for循环得到每个结果</p><h5 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># a得到一个生成器,并不是元组，生成器不能直接打印</span>b <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># b得到的是一个列表</span><span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment"># 也可以使用next(a,None) 第二个参数表示当生成器执行完后，会报StopIteration错误，设置为None，不会报错</span><span class="token keyword">def</span> <span class="token function">yield_a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"before yield"</span><span class="token punctuation">)</span>    <span class="token keyword">yield</span> <span class="token number">5</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"after yield"</span><span class="token punctuation">)</span>d <span class="token operator">=</span> yield_a<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment"># 此时的d就是生成器，不会输出print的结果，可使用for输出</span><span class="token builtin">next</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 获取yield之前代码并执行，包括yield 5,如果不写，返回None</span><span class="token builtin">next</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token comment"># 获取yield之后代码并执行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="第三方库"><a href="#第三方库" class="headerlink" title="第三方库"></a>第三方库</h3><p>pymysql连接数据库</p><p>安装pymysql</p><blockquote><p>pip install pymysql</p></blockquote><h4 id="mysql工具类"><a href="#mysql工具类" class="headerlink" title="mysql工具类"></a>mysql工具类</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pymysql<span class="token keyword">class</span> <span class="token class-name">MysqlUtil</span><span class="token punctuation">:</span>    <span class="token comment"># 连接数据库</span>    connect <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                              user<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                              password<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">,</span>                              database<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token comment"># 游标用于操作数据库</span>    cursor <span class="token operator">=</span> connect<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">select</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">tuple</span><span class="token punctuation">:</span>        <span class="token comment"># 这个返回的是查询到的条数，结果存放在cursor中</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>           cls<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token punctuation">)</span>        <span class="token comment"># 返回查询结果</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> cls<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">insert</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> cls<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> cls<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">update</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> query<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> cls<span class="token punctuation">.</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>query<span class="token punctuation">,</span> args<span class="token punctuation">)</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>connect<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="加密与解密"><a href="#加密与解密" class="headerlink" title="加密与解密"></a>加密与解密</h4><h5 id="base64"><a href="#base64" class="headerlink" title="base64"></a>base64</h5><p>经过base64编码后，数据是原来的4/3倍。数据传输的时候，会使用这种编码。编码的原因是为了通用性，数据传输时是二进制，如果不经过编码，不同的设备对原始数据的解读是不一样的。base64编码后，最多包括65个字符(a-z,A-Z,0-9,+,/,=)，其中=是为了编码的可还原加入的补充字符，=只出现再末尾，最多出现2个，原字节数必须是三的倍数，不够就加\x00，编码后加\x00变成=，base64编码后的字符一般都会有+/=</p><p>参考链接</p><blockquote><p><a class="link"   href="https://bbs.pediy.com/thread-253433.htm" >https://bbs.pediy.com/thread-253433.htm<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>编码表</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211023193202889.png" alt="base64编码表"></p><p>原字符”编码1”,二进制六位一组</p><p>111001 111011 110010 010110 111001 111010 000010 000001 001100 010000 000000 000000</p><p>57 59 50 22 57 58 2 1 12 16 0 0</p><p>5    7   y W 5 6 C B M Q = =</p><p>应用：图片传输，邮件传输，url</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">class</span> <span class="token class-name">Encryption</span><span class="token punctuation">:</span>     <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="md5"><a href="#md5" class="headerlink" title="md5"></a>md5</h5><p>md5是一种不可逆的加密算法，只能通过暴力破解解密,加密后的结果是128bit</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">class</span> <span class="token class-name">Encryption</span><span class="token punctuation">:</span><span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        md5 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>        md5<span class="token punctuation">.</span>update<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> md5<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="aes"><a href="#aes" class="headerlink" title="aes"></a>aes</h5><p>高级加密标准(AES,Advanced Encryption Standard)，是常见的对称加密算法。对称加密是指加密的密匙与解密的密匙相同。</p><p>安装第三方库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> pycryptodome<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES<span class="token keyword">class</span> <span class="token class-name">Encryption</span><span class="token punctuation">:</span>     <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">aes_encode</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> <span class="token string">"0102030405060708"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token punctuation">:</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>        message <span class="token operator">=</span> message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            message <span class="token operator">+=</span> <span class="token string">b'\x00'</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>aes<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">aes_decode</span><span class="token punctuation">(</span>message<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span> <span class="token operator">=</span> <span class="token string">"0102030405060708"</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mode<span class="token operator">=</span>AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span><span class="token punctuation">:</span>        aes <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span>        message <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>message<span class="token punctuation">)</span>        <span class="token keyword">return</span> aes<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">b'\x00'</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="rsa"><a href="#rsa" class="headerlink" title="rsa"></a>rsa</h5><h3 id="pip-常用命令"><a href="#pip-常用命令" class="headerlink" title="pip 常用命令"></a>pip 常用命令</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">导出安装的packagepip freeze <span class="token operator">></span> filepath使用文件安装pip install <span class="token operator">-</span>r 导出的文件文件内容：pytest<span class="token operator">==</span><span class="token number">1.2</span><span class="token number">.0</span>列出安装的包pip <span class="token builtin">list</span>查询包pip search pytest<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更换pip下载源"><a href="#更换pip下载源" class="headerlink" title="更换pip下载源"></a>更换pip下载源</h4><p><strong>windows:</strong><br>在windows系统盘(一般是C盘)目录下，C:\Users%username%\pip\pip.ini，没有pip或者pip.ini就新建</p><p><strong>linux:</strong><br>修改 ~/.pip/pip.conf (没有就创建一个)</p><p>pip.ini或者pip.conf内容如下</p><blockquote><p>[global]<br>index-url=<a class="link"   href="https://mirrors.aliyun.com/pypi/simple/" >https://mirrors.aliyun.com/pypi/simple/<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web自动化</title>
      <link href="/2021/10/14/web%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
      <url>/2021/10/14/web%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>web自动化，通常是通过调用浏览器驱动，对浏览器进行模拟用户行为的操作，采用python+selenium+allure技术，实现自动化</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h4><ol><li>python</li><li>pytest 安装，pip install pytest</li><li>selenium安装，pip install selenium</li><li>下载对应的<a class="link"   href="http://chromedriver.storage.googleapis.com/index.html" >浏览器驱动<i class="fas fa-external-link-alt"></i></a>，驱动最好配置环境变量</li></ol><h4 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h4><ol><li>安装浏览器</li><li>安装浏览器对应驱动</li><li>python，linux环境默认安装python2</li><li>pip，默认没有安装pip</li></ol><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>如果使用selenium自定义的函数无法解决的问题，可考虑使用js解决</p><h3 id="selenium基本用法"><a href="#selenium基本用法" class="headerlink" title="selenium基本用法"></a>selenium基本用法</h3><p>js中window.scrollTo(x,y),x表示横向移动，y表示纵向移动，这个操作的是整个页面，selenium的详情，可访问<a class="link"   href="https://selenium-python.readthedocs.io/" >官网<i class="fas fa-external-link-alt"></i></a></p><h4 id="滑动滚动条"><a href="#滑动滚动条" class="headerlink" title="滑动滚动条"></a>滑动滚动条</h4><p>窗口的滚动条与元素的滚动条滑动方法不一样，元素的滚动条可以先定位元素，窗口的滚动条通过window的属性滑动，元素滚动条的特殊情况下，滚动条是一个div元素，则直接定位此元素</p><p>滚动到底部</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.scrollTo(0,document.body.scrollHeight)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>滚动到顶部</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"window.scrollTo(0,0)"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>移动到指定元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"arguments[0].scrollIntoView(false);"</span><span class="token punctuation">,</span> ele<span class="token punctuation">)</span><span class="token comment"># false表示元素停留在底部(推荐)，不填默认是true，元素滑动到顶部(可能会被顶部的元素遮挡)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="滚动条是元素"><a href="#滚动条是元素" class="headerlink" title="滚动条是元素"></a>滚动条是元素</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/try/try.php?filename=try_ng_select"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"iframeResult"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">"select[ng-model='selectedName']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"Taobao"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 切回到父frame</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>parent_frame<span class="token punctuation">(</span><span class="token punctuation">)</span>    js <span class="token operator">=</span> <span class="token string">" var ele = document.querySelector('.CodeMirror-vscrollbar');ele.scrollTop=ele.scrollHeight"</span>    driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span>js<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="操作readonly属性控件"><a href="#操作readonly属性控件" class="headerlink" title="操作readonly属性控件"></a>操作readonly属性控件</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/try/try.php?filename=tryhtml_input_readonly"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span><span class="token string">"iframeResult"</span><span class="token punctuation">)</span>    <span class="token comment"># 通过js找到元素，并移除readonly属性即可操作</span>    driver<span class="token punctuation">.</span>execute_script<span class="token punctuation">(</span><span class="token string">"document.getElementsByName('country')[0].removeAttribute('readonly')"</span><span class="token punctuation">)</span>    ele <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>NAME<span class="token punctuation">,</span><span class="token string">"country"</span><span class="token punctuation">)</span>    ele<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    ele<span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"你被改了"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="获取隐藏元素文本"><a href="#获取隐藏元素文本" class="headerlink" title="获取隐藏元素文本"></a>获取隐藏元素文本</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">ele<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">'innerText'</span><span class="token punctuation">)</span><span class="token comment">#ele表示定位到的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h4><p>iframe切换时，如果iframe是动态id而且没有name属性，则考虑定位到iframe元素，driver.switch_to.frame(iframe_ele)中，参数可以填id，或者name，也可以填iframe元素</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://mail.163.com/"</span><span class="token punctuation">)</span>    iframe_ele <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">"#loginDiv>iframe"</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>frame<span class="token punctuation">(</span>iframe_ele<span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">"input[name='email']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>send_keys<span class="token punctuation">(</span><span class="token string">"email"</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="窗口切换"><a href="#窗口切换" class="headerlink" title="窗口切换"></a>窗口切换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://music.163.com/"</span><span class="token punctuation">)</span>    <span class="token comment"># 点击音乐人,会新开一个窗口</span>    driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">"a[data-module='musician']"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">)</span>    <span class="token comment"># 记录当前窗口</span>    handle <span class="token operator">=</span> driver<span class="token punctuation">.</span>current_window_handle    <span class="token comment"># 切换到新开的窗口</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>driver<span class="token punctuation">.</span>window_handles<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token comment"># 关闭窗口</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 切换回新开的窗口</span>    driver<span class="token punctuation">.</span>switch_to<span class="token punctuation">.</span>window<span class="token punctuation">(</span>handle<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h4><p>等待分类：</p><p>隐式等待，初始化浏览器一般会设置隐式等待。</p><p>显示等待：有时候隐式等待不生效或者其他因素，可使用显示等待。一般在后台的管理系统中，添加操作的时候，会有一个 添加成功或者失败的提示，这个提示是会停留2s左右自动消失的，如果在自动化的过程中不添加等待的话，会获取到之前的未消失的结果。</p><p>强制等待：不推荐使用，如果可以，推荐使用显示等待。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support <span class="token keyword">import</span> expected_conditions<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>support<span class="token punctuation">.</span>wait <span class="token keyword">import</span> WebDriverWait<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://music.163.com/"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>driver<span class="token punctuation">.</span>title<span class="token punctuation">)</span>    <span class="token comment"># 显示等待，在3s内，轮询判断title成立，返回True,否则报超时异常，常用</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>title_is<span class="token punctuation">(</span><span class="token string">"网易云音乐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 显示等待，在3s内，轮询判断title不成立，返回False,否则报超时异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>WebDriverWait<span class="token punctuation">(</span>driver<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>until_not<span class="token punctuation">(</span>expected_conditions<span class="token punctuation">.</span>title_contains<span class="token punctuation">(</span><span class="token string">"网易音乐"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 强制等待</span>    driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h4><p><a class="link"   href="https://dun.163.com/trial/jigsaw" >https://dun.163.com/trial/jigsaw<i class="fas fa-external-link-alt"></i></a></p><h4 id="cookies登录"><a href="#cookies登录" class="headerlink" title="cookies登录"></a>cookies登录</h4><p>cookies的获取方法，打开百度，登录后按f12打开开发者工具</p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211106212331721.png" alt="获取cookies截图"></p><p>conftest.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_cookies</span><span class="token punctuation">(</span>cookies<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">list</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    将字符串的类型的cookies，转换成列表，列表元素是字典&#123;name:"",value:""&#125;形式    '''</span>    <span class="token comment"># 切割成列表</span>    cookies <span class="token operator">=</span> cookies<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span>    <span class="token comment"># 去除前后空格</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 修改列表元素，driver.add_cookie(i)方法的参数是字典，key必须包含name和value</span>    <span class="token comment"># BD_UPN=12314753元素，name就是BD_UPN,value就是12314753</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cookies<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'value'</span><span class="token punctuation">:</span> cookies<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cookies<span class="token decorator annotation punctuation">@pytest<span class="token punctuation">.</span>fixture</span><span class="token punctuation">(</span>scope<span class="token operator">=</span><span class="token string">"class"</span><span class="token punctuation">,</span>autouse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cookies <span class="token operator">=</span> <span class="token string">''</span><span class="token comment">#填写复制的cookies字符串</span>    cookies <span class="token operator">=</span> get_cookies<span class="token punctuation">(</span>cookies<span class="token punctuation">)</span>    <span class="token comment"># 获取driver</span>    driver <span class="token operator">=</span> BrowserUtil<span class="token punctuation">.</span>get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 必须先打开网页，才能添加cookies</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://www.baidu.com"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> cookies<span class="token punctuation">:</span>        driver<span class="token punctuation">.</span>add_cookie<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token comment"># 添加cookies后，需要刷新网页</span>    driver<span class="token punctuation">.</span>refresh<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>test_baidu.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>common<span class="token punctuation">.</span>by <span class="token keyword">import</span> By<span class="token keyword">from</span> pytest_base<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>browser_util <span class="token keyword">import</span> BrowserUtil<span class="token keyword">class</span> <span class="token class-name">TestBaidu</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">setup_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>driver <span class="token operator">=</span> BrowserUtil<span class="token punctuation">.</span>get_driver<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">teardown_class</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        BrowserUtil<span class="token punctuation">.</span>quit_browser<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">test_baidu</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            text <span class="token operator">=</span>  self<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span><span class="token string">"#u1>#s-top-loginbtn"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"innerText"</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            text <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">assert</span> text <span class="token operator">==</span> <span class="token string">"登录"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>browser_util.py</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>remote<span class="token punctuation">.</span>webdriver <span class="token keyword">import</span> WebDriver<span class="token keyword">class</span> <span class="token class-name">BrowserUtil</span><span class="token punctuation">:</span>    driver<span class="token punctuation">:</span> WebDriver <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">get_driver</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>driver <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            <span class="token comment"># 初始化浏览器驱动</span>            cls<span class="token punctuation">.</span>driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 最大化浏览器</span>            cls<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>maximize_window<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token comment"># 设置隐式等待10s</span>            cls<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>driver    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">quit_browser</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> cls<span class="token punctuation">.</span>driver <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>driver<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>            cls<span class="token punctuation">.</span>driver <span class="token operator">=</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="复用浏览器"><a href="#复用浏览器" class="headerlink" title="复用浏览器"></a>复用浏览器</h4><p>复用浏览器，必须先关闭浏览器（否则执行脚本会报错或出现其他问题），然后使用命令打开一个新的浏览器，使用命令行打开浏览器，需要设置浏览器的路径到环境变量中，使用命令行打开的浏览器无法使用driver.quit()退出浏览器，不过可以使用driver.close()关闭打开的所有页面，浏览器就自动退出了</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chrome --remote-debugging-port<span class="token operator">=</span><span class="token number">8888</span> <span class="token comment"># 命令行打开浏览器,端口没有特殊要求，不适用系统已占用端口和已定义端口即可</span><span class="token comment"># 验证服务是否成功，可在打开的浏览器中输入ip:port,一般是127.0.0.1:8888(127.0.0.1是本机ip，8888是之前</span><span class="token comment"># 设置的端口号)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> selenium <span class="token keyword">import</span> webdriver<span class="token keyword">import</span> time<span class="token keyword">from</span> selenium<span class="token punctuation">.</span>webdriver<span class="token punctuation">.</span>chrome<span class="token punctuation">.</span>options <span class="token keyword">import</span> Options<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>    options<span class="token punctuation">.</span>debugger_address<span class="token operator">=</span><span class="token string">"127.0.0.1:8888"</span>    <span class="token comment"># 也可使用chrome_options.add_experimental_option("debuggerAddress", "127.0.0.1:8888")</span>  <span class="token comment"># 不加浏览器的驱动参数，需要将驱动路径设置到环境变量中</span>    driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    driver<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 由于只打开了一个页面，使用close关闭页面，浏览器会自动关闭</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="options参数"><a href="#options参数" class="headerlink" title="options参数"></a>options参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Selenium的js监测机制,就是判断window.navigator.webdriver的值是否为ture</span>  <span class="token comment"># options参数可以设置window.navigator.webdriver的值为undefined</span>  options <span class="token operator">=</span> Options<span class="token punctuation">(</span><span class="token punctuation">)</span>  options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'excludeSwitches'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'enable-automation'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  options<span class="token punctuation">.</span>add_experimental_option<span class="token punctuation">(</span><span class="token string">'useAutomationExtension'</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>  driver <span class="token operator">=</span> webdriver<span class="token punctuation">.</span>Chrome<span class="token punctuation">(</span>options<span class="token operator">=</span>options<span class="token punctuation">)</span>  driver<span class="token punctuation">.</span>execute_cdp_cmd<span class="token punctuation">(</span><span class="token string">"Page.addScriptToEvaluateOnNewDocument"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>      <span class="token string">"source"</span><span class="token punctuation">:</span> <span class="token triple-quoted-string string">"""         Object.defineProperty(navigator, 'webdriver', &#123;           get: () => undefined         &#125;)       """</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  driver<span class="token punctuation">.</span>implicitly_wait<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>  driver<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"https://699pic.com/sousuo-218808-13-1-0-0-0.html"</span><span class="token punctuation">)</span>  driver<span class="token punctuation">.</span>find_element<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">"#act1011Close"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>click<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># driver.quit()</span>  urls_ele <span class="token operator">=</span> driver<span class="token punctuation">.</span>find_elements<span class="token punctuation">(</span>By<span class="token punctuation">.</span>CSS_SELECTOR<span class="token punctuation">,</span> <span class="token string">"#wrapper > div.imgshow.clearfix > div > div > a > img"</span><span class="token punctuation">)</span>  urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> urls_ele<span class="token punctuation">:</span>      <span class="token triple-quoted-string string">""" https://seopic.699pic.com/photo/40172/8292.jpg_wh1200.jpg          https://img95.699pic.com/photo/40172/8292.jpg_wh300.jpg"""</span>      urls<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">.</span>get_attribute<span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"img95"</span><span class="token punctuation">,</span> <span class="token string">"seopic"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"wh300"</span><span class="token punctuation">,</span> <span class="token string">"wh1200"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> urls<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="特殊元素定位技巧"><a href="#特殊元素定位技巧" class="headerlink" title="特殊元素定位技巧"></a>特殊元素定位技巧</h4><blockquote><p>当添加元素成功，弹出的消息，2s左右就消息，或者需要悬停鼠标才会出现，鼠标移开又消失的元素，这些元素的定位可以借助js的定时函数辅助定位，f12打开开发者工具，console中输入setTimeout(“debugger”,5000)，按下enter，5s就会执行debugger，页面会冻结，进入debugger模式，这时就可以进行定位</p></blockquote><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211119201932678.png" alt="辅助定位操作图"></p><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211119201443066.png" alt="进入bugger模式后图片"></p><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="元素找不到"><a href="#元素找不到" class="headerlink" title="元素找不到"></a>元素找不到</h4><ol><li>查找的条件是否写对，直接在浏览器器中f12，ctrl+f，在查找框输入条件，确认是否可查到元素</li><li>查找的页面是否对，有时候代码执行太快，需要加等待，或者页面刷新，这是会报元素没有附到当前页面，需要注意加等待或者加判断条件，判断其他的元素出现才进行查找</li><li>判断是否有frame框架，有frame需要切到frame中</li><li>判断元素的属性，如id，class是否是动态的，需要切换其他的定位方式，如通过tag，name等定位</li></ol><h4 id="元素不可交互"><a href="#元素不可交互" class="headerlink" title="元素不可交互"></a>元素不可交互</h4><p>元素不可交互说明元素已经定位到，但是由于是隐藏的元素，不能click，send_keys等元素操作。可以按正常的操作步骤，让元素显示之后再定位操作元素，或者通过js，移除元素的隐藏属性，操作元素</p>]]></content>
      
      
      <categories>
          
          <category> 自动化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web自动化 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql基本用法</title>
      <link href="/2021/10/13/mysql%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/mysql%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>数据库一般分为关系型数据库和非关系型数据库，mysql是关系型数据库</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="数据查询"><a href="#数据查询" class="headerlink" title="数据查询"></a>数据查询</h4><p>执行顺序</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select  4from1where 2group by3having5order by6limit7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="增加数据"><a href="#增加数据" class="headerlink" title="增加数据"></a>增加数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 插入一条记录，建议所有字段都填上insert into tablename(字段一,字段二....) values(value1,value2....)insert into s(s_no,s_name,s_score) values(202111,&#39;zhangsan&#39;,80)#插入多条记录，每条记录用逗号隔开insert into tablename(字段一,字段二....) values(value1,value2...),(value1,value2)..<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"># 不写条件会删除整个表的数据delete from tablename#删除符合条件的数据delete from dept where deptno&#x3D;50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">update tablename set ... where ...update dept set dname&#x3D;&#39;test&#39;,loc&#x3D;&quot;japan&quot; where deptno&#x3D;50<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="练习题数据表"><a href="#练习题数据表" class="headerlink" title="练习题数据表"></a>练习题数据表</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">dept:部门表+--------+-------------+----------+| deptno | dname       | loc      |+--------+-------------+----------+|     10 | ACCOUNTING  | NEW YORK ||     20 | RESEARCHING | DALLAS   ||     30 | SALES       | CHICAGO  ||     40 | OPERATIONS  | BOSTON   ||     50 | null   | null     |+--------+-------------+----------+员工表:emp+-------+--------+-----------+------+------------+---------+---------+--------+| empno | ename  | job       | mgr  | hiredate   | sal     | comm    | deptno |+-------+--------+-----------+------+------------+---------+---------+--------+|  7369 | SIMITH | CLERK     | 7902 | 1980-12-17 |  800.00 |    NULL |     20 ||  7499 | ALLEN  | SALESMAN  | 7698 | 1981-02-20 | 1600.00 |  300.00 |     30 ||  7521 | WARD   | SALESMAN  | 7698 | 1981-02-22 | 1250.00 |  500.00 |     30 ||  7566 | JONES  | MANAGER   | 7839 | 1981-04-02 | 2975.00 |    NULL |     20 ||  7654 | MARTIN | SALESMAN  | 7698 | 1981-09-28 | 1250.00 | 1400.00 |     30 ||  7698 | BLAKE  | MANAGER   | 7839 | 1981-05-01 | 2850.00 |    NULL |     30 ||  7782 | CLARK  | MANAGER   | 7839 | 1981-06-09 | 2450.00 |    NULL |     10 ||  7788 | SCOTT  | ANALYST   | 7566 | 1987-04-19 | 3000.00 |    NULL |     20 ||  7839 | KING   | PRESIDENT | NULL | 1981-11-17 | 5000.00 |    NULL |     10 ||  7844 | TURNER | SALESMAN  | 7698 | 1981-09-08 | 1500.00 |    NULL |     30 ||  7876 | ADAMS  | CLERK     | 7788 | 1987-05-23 | 1100.00 |    NULL |     20 ||  7900 | JAMES  | CLERK     | 7698 | 1981-12-03 |  950.00 |    NULL |     30 ||  7902 | FORD   | ANALYST   | 7566 | 1981-12-03 | 3000.00 |    NULL |     20 ||  7934 | MILLER | CLERK     | 7782 | 1982-01-23 | 1300.00 |    NULL |     10 |+-------+--------+-----------+------+------------+---------+---------+--------+工资表:salgrade+-------+-------+-------+| grade | losal | hisal |+-------+-------+-------+|     1 |   700 |  1200 ||     2 |  1201 |  1400 ||     3 |  1401 |  2000 ||     4 |  2001 |  3000 ||     5 |  3001 |  5000 |+-------+-------+-------+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h4><p>1、 取得每个部门最高薪水人员的名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.求出每个部门的最高薪水select deptno,max(sal) from emp group by deptno2.最高薪水的名单select e.deptno,e.ename,e.sal from emp e join (select deptno,max(sal) max_sal from emp group by deptno) t on e.deptno&#x3D;t.deptno where e.deptno&#x3D;t.deptno and e.sal &#x3D; t.max_sal;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2、哪些人的薪水在部门的平均薪水之上</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.求出部门的平均薪水select deptno,avg(sal) as avg_sal from emp group by deptno2.select e.ename from emp e join (select deptno,avg(sal) as avg_sal from emp group by deptno) t on e.deptno&#x3D;t.deptno where e.deptno&#x3D;t.deptno and e.sal&gt;t.avg_sal<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>3、取得部门中所有人平均的薪水等级</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select s.grade,e.* from emp e join salgrade s on e.sal between s.losal and s.hisal;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、不用组函数（max）,取得最高薪水</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select sal from emp order by sal desc limit 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5、取得平均薪水最高部门的部门编号；</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,avg(sal) as avg_sal from emp group by deptno order by avg_sal desc limit 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6、取得平均薪水最高的部门的部门名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.deptno,d.dname,avg(sal) as avg_sal from emp e join dept d on e.deptno&#x3D;d.deptno group by e.deptno order by avg_sal desc limit 1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>7、求平均薪水的等级最低的部门的部门名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>8、取得比普通员工最高薪水还要高的领导人姓名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>9、取得薪水最高的前五名员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp order by sal desc limit 5;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>10、取得薪水最高的第6到第10名员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp order by sal desc limit 5,5<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>11、取得最后入职的五个员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>12、取得每个薪水等级有多少个员工</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13、面试题<br>有3个表S(学生表)，C（课程表），SC（学生选课表）<br>S（SNO，SNAME）代表（学号，姓名）<br>C（CNO，CNAME，CTEACHER）代表（课号，课名，教师）<br>SC（SNO，CNO，SCGRADE）代表（学号，课号，成绩）<br>问题：</p><p>建表语句</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">CREATE TABLE &#96;study&#96;.S&#96; (  &#96;SNO&#96; INT NOT NULL,  &#96;SNAME&#96; VARCHAR(45) NULL);  CREATE TABLE study.C (  &#96;CNO&#96; INT NOT NULL,  &#96;CNAME&#96; VARCHAR(45) NULL,  &#96;CTEACHER&#96; VARCHAR(45) NULL);  CREATE TABLE study.SC (  &#96;SNO&#96; INT NOT NULL,  &#96;CNO&#96; INT NOT NULL,  &#96;SCGRADE&#96; VARCHAR(45) NULL);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>1，找出没选过“黎明”老师的所有学生姓名。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">1.求出选过黎明的学生select sc.SNO from C  c join SC  sc on c.CNO&#x3D;sc.CNO where c.CTEACHER&#x3D;&#39;yyls&#39;2.select * from S where SNO not in (select sc.SNO from C  c join SC  sc on c.CNO&#x3D;sc.CNO where c.CTEACHER&#x3D;&#39;yyls&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2，列出2门以上（含2门）不及格学生姓名及平均成绩。</p><p>3，即学过1号课程又学过2号课所有学生的姓名。</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>14、列出所有员工及领导的姓名</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>15、列出受雇日期早于其直接上级的所有员工编号，姓名，部门名称</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>16、列出部门名称和这些部门的员工信息，同时列出那些没有员工的部门</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select d.*,e.* from emp e right join dept d on e.deptno&#x3D;d.deptno;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>17、列出至少有五个员工的所有部门</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select deptno,count(ename) from emp group by deptno having count(ename)&gt;&#x3D;5 ;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>18、列出薪水比SMITH多的所有员工信息</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from emp where sal &gt; (select sal from emp where ename&#x3D;&#39;SMITH&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>19、列出所有“CLERK”（办事员）的姓名及其部门名称，部门的人数</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>20、列出最低薪水大于1500的各种工作及从事此工作的全部雇员数<br>21、列出在部门“SALES”（销售部）工作的员工的姓名，假定不知道销售部的部门编号<br>22、列出薪水高于公司平均水平的所有员工，所在部门、上级领导、雇员的工资等级<br>23、列出与“scott”从事相同工作的所有员工及部门名称<br>24、列出薪水等于部门30中员工的薪水的其他员工的姓名和薪水<br>25、列出薪水高于在部门30工作的所有员工的薪水的员工姓名和薪水、部门名称<br>26、列出在每个部门工作的员工数量，平均工资和平均服务期限<br>27、列出所有员工的姓名、部门名称和工资<br>28、列出所有部门的详细信息和人数<br>29、列出各种工作的最低工资以及从事此工作的雇员姓名<br>30、列出各个部门的manager(领导)的最低薪水</p><p>31、列出所有员工的年工资，按年薪从低到高排序</p><p>32、求出员工领导的薪水超过3000的员工名称与领导</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select e.ename,t.ename from emp e join emp t on e.empno &#x3D; t.mgr where t.sal &gt; 3000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>33、求出部门名称中，带“S”字符的部门员工的工资合计、部门人数</p><p>34、给任职日期超过三十年的员工加薪10%</p><h4 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">mysqldump -u root -p datbasename &gt; *.sql # 备份整个数据库中的表mysqldump -u root -p datbasename tablename &gt; *.sql # 备份数据库中的某个表<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="导入数据库"><a href="#导入数据库" class="headerlink" title="导入数据库"></a>导入数据库</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">source *.sql # 导入数据库，如果报错，需手动创建数据库，然后use 数据库，source导入的数据超快<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="不支持中文"><a href="#不支持中文" class="headerlink" title="不支持中文"></a>不支持中文</h4><p>MySQL版本：5.7</p><p>查看mysql默认字符集</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">show variables like &quot;character%&quot;;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>linux下的配置文件</p><blockquote><p>/etc/my.cnf ，如果没有就创建my.cnf</p></blockquote><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">[mysqld]character-set-server &#x3D; utf8mb4[client]default-character-set &#x3D; utf8mb4[mysql]default-character-set &#x3D; utf8mb4<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>adb基本用法</title>
      <link href="/2021/10/13/adb%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/adb%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>adb是android debug bridge(android 调试桥),通过数据线连接电脑，调试手机</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul><li><p>获取当前窗口应用包名<br>mac：adb shell dumpsys activity top| grep ACTIVITY<br>win：adb shell dumpsys activity top| findstr ACTIVITY</p></li><li><p>获取进程对应的包名<br>adb shell ps 进程号</p></li><li><p>刷机相关命令</p><p>adb reboot fastboot     进入fastboot模式</p><p>adb reboot recovery    进入recovery模式</p></li><li><p>多设备连接时，指定设备执行命令</p><p>adb -s udid </p><p>例子：</p><p>adb -s udid install *.apk</p></li><li><p>adb无线调试(先用数据线连接电脑，设置后可拔出数据线)</p><ol><li>adb tcpip port（常用端口5555）</li><li>adb connect ip:port (ip是手机的ip，port是步骤1设置的端口)</li></ol></li></ul><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="INSTALL-FAILED-NO-MATCHING-ABIS"><a href="#INSTALL-FAILED-NO-MATCHING-ABIS" class="headerlink" title="INSTALL_FAILED_NO_MATCHING_ABIS"></a>INSTALL_FAILED_NO_MATCHING_ABIS</h4><p>查看abi<br>adb shell getprop ro.product.cpu.abi<br>手机的是arm架构，模拟器中的是x86架构，安装genymotion-arm-translation一般可解决，暂无其他办法</p><h4 id="read-only-file-system"><a href="#read-only-file-system" class="headerlink" title="read-only file system"></a>read-only file system</h4><p>root权限下没有写权限，重新挂载临时分区</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mount</span> -o remount -w /pathname <span class="token comment"># 注意不要写/system/etc等存在子目录，直接写/systemg,否则容易报错</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>13316233748</p>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> adb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>gitee与git基本用法</title>
      <link href="/2021/10/13/gitee%E4%B8%8Egit%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/gitee%E4%B8%8Egit%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>git与gitee(码云)是代码管理与托管平台</p><h3 id="官网地址"><a href="#官网地址" class="headerlink" title="官网地址"></a>官网地址</h3><blockquote><p>gitee:    <a class="link"   href="https://gitee.com/" >https://gitee.com<i class="fas fa-external-link-alt"></i></a></p><p>git:    <a class="link"   href="https://github.com/" >https://github.com<i class="fas fa-external-link-alt"></i></a></p></blockquote><h3 id="gitee"><a href="#gitee" class="headerlink" title="gitee"></a>gitee</h3><h4 id="生成ssh公匙"><a href="#生成ssh公匙" class="headerlink" title="生成ssh公匙"></a>生成ssh公匙</h4><blockquote><p><a class="link"   href="https://gitee.com/help/articles/4181#article-header0" >https://gitee.com/help/articles/4181#article-header0<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h4><blockquote><p>git init (初始化本地仓库，生成.git)<br>git add .  （将本地文件加到仓库里）<br>git commit -m “message” （设置提交信息）<br>git remote add origin   <a class="link"   href="mailto:&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;" >&#103;&#x69;&#x74;&#x40;&#x67;&#105;&#116;&#x68;&#x75;&#x62;&#x2e;&#99;&#x6f;&#109;<i class="fas fa-external-link-alt"></i></a>:username/username.github.io.git（本地仓库链接远程仓库,修改对应username即可）<br>git push -u origin master （push文件到仓库中）<br>git branch 查看本地仓库分支<br>git branch -a 查看所有分支，包括远程仓库与本地仓库<br>git branch -r 查看远程仓库分支<br>git remote add origin url 给远程连接的分支起别名<br>git remote remove origin 删除远程连接的别名origin</p></blockquote><h4 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h4><blockquote><p><a class="link"   href="https://blog.csdn.net/chaihuasong/article/details/37911723" >https://blog.csdn.net/chaihuasong/article/details/37911723<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://www.runoob.com/git/git-remote.html" >https://www.runoob.com/git/git-remote.html<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gitee </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>postman基本用法</title>
      <link href="/2021/10/13/postman%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/postman%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>postman是接口测试的常用工具，可使用csv文件进行参数化，导出json文件可以集成到jenkins中</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>postman官网请点<a class="link"   href="https://www.postman.com/downloads/" >这里<i class="fas fa-external-link-alt"></i></a></p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><blockquote><p>环境准备：<br>nodejs(安装nodejs会默认安装npm)<br>npm -v 查看npm 版本<br>安装newman插件，生成相关的测试信息<br>npm install -g newman<br>安装生成测试报告的插件<br>npm install -g newman-reporter-html</p></blockquote><p>postman使用插件生成测试报告</p><blockquote><p>生成报告<br>newman run 测试脚本文件(json) -e<br> 环境变量文件 -d 测试数据文件 -r html –reporter-html-export report.html<br>-e 环境变量<br>-g 全局变量<br>-d csv，json数据<br>-n 执行次数<br>-r cli，html，json，junit –reporter-html-export r.html</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> postman </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm基本用法</title>
      <link href="/2021/10/13/nvm%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/nvm%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>nvm是管理nodejs软件的管理工具，nvm可以在一个系统中安装多个nodejs，使用nvm use nodejs版本号进行切换。</p><h3 id="基本工作原理"><a href="#基本工作原理" class="headerlink" title="基本工作原理"></a>基本工作原理</h3><blockquote><p>nvm将nodejs安装在nvm的根目录下，nvm安装时设置一个nodejs的工作目录，并将工作目录添加到环境变量，nvm设置的工作目录其实是nodejs的快捷方式，通过快捷方式，切换当前使用的nodejs版本</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><blockquote><p>安装路径不要有中文和空格</p><p>安装mvn之前系统不能先安装nodejs，否则mvn部分命令无法使用(mvn use…)</p></blockquote><h4 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h4><blockquote><p><a class="link"   href="https://github.com/coreybutler/nvm-windows/releases" >https://github.com/coreybutler/nvm-windows/releases<i class="fas fa-external-link-alt"></i></a></p><p>nvm-setup.zip：安装版，推荐使用</p></blockquote><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><blockquote><p>查看可安装版本    nvm ls available<br>推荐安装lst版本<br>安装指定版本        nvm install 版本号<br>卸载指定版本        nvm uninstall 版本号<br>切换要使用的版本        nvm use 版本号<br>查看nvm版本号    nvm version<br>查看当前nodejs版本     nvm current </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jmeter基本用法</title>
      <link href="/2021/10/13/jmeter%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/"/>
      <url>/2021/10/13/jmeter%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>jmeter是接口测试和性能测试常用工具</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>jmeter依赖jave，需安装jdk或者jre并配置环境变量</p><h4 id="解决中文乱码"><a href="#解决中文乱码" class="headerlink" title="解决中文乱码"></a>解决中文乱码</h4><p>jmeter安装目录/bin/jmeter.properties文件中</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">sampleresult.default.encoding</span><span class="token punctuation">=</span><span class="token attr-value">UTF-8</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><p>jmeter安装目录/bin下</p><ol><li>图形化界面入口<br>ApacheJMeter.jar</li><li>windows命令行启动<br>jmeter.bat</li><li>linux命令行启动<br>bash jmeter.sh</li></ol><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>插件管理包下载地址</p><blockquote><p><a class="link"   href="https://jmeter-plugins.org/install/Install/" >https://jmeter-plugins.org/install/Install/<i class="fas fa-external-link-alt"></i></a></p></blockquote><p>安装后重启查看，选项-plugins manager，出现此选项则安装成功</p><h4 id="线程组设置"><a href="#线程组设置" class="headerlink" title="线程组设置"></a>线程组设置</h4><p>前提条件：一个测试计划存在多个线程组<br>默认情况下线程组是并发执行的，这会导致一个线程组中的线程还没有结束，另一个线程组中的线程就会执行，可以在测试计划页面勾选<strong>独立运行每个线程组</strong>即可</p><h4 id="http请求默认值"><a href="#http请求默认值" class="headerlink" title="http请求默认值"></a>http请求默认值</h4><p>一些公共的请求信息可在请求默认值中设置</p><h4 id="信息头管理器"><a href="#信息头管理器" class="headerlink" title="信息头管理器"></a>信息头管理器</h4><p>请求要传递的数据是json数据,需设置请求头<br>Content-Type：<br>application/json; charset=UTF-8<br>调试取样器，可以看到一些输入的内容<br>参数化<br>用户自定义的变量<br>csv数据文件设置<br>用户参数<br>函数</p><h4 id="直连数据库"><a href="#直连数据库" class="headerlink" title="直连数据库"></a>直连数据库</h4><p>需要加载驱动：<br>mysql8兼容低版本<br>jar包可以放在lib目录下，就不需要手动添加jar路径<br>手动添加：测试计划-浏览(最后面)，选择jar包<br>下载：<br><a class="link"   href="https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.26/mysql-connector-java-8.0.26.jar" >https://repo1.maven.org/maven2/mysql/mysql-connector-java/8.0.26/mysql-connector-java-8.0.26.jar<i class="fas fa-external-link-alt"></i></a><br>步骤：<br>添加驱动mysql驱动包，jar放到jmeter安装路径下的lib下<br>添加配置元件-JDBC Connection Configuration<br>variable name for created pool:数据库连接池，名字随意</p><p>database url:jdbc:mysql://8.135.13.33:3306/practical<br>jdbc driver class:com.mysql.jdbc.Driver<br>username:数据库用户名<br>password:数据库密码</p><p>添加jdbc 请求<br>取样器-jdbc request<br>填写数据库连接池<br>query type：选择sql语句类型<br>默认select statement：查询<br>输入要执行的sql语句<br>variable names：查询后的字段</p><h4 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h4><p>响应断言:断言状态码和响应体<br>大小断言：判断响应内容的字节长度<br>断言持续时间：判断响应时间</p><p>逻辑控制器<br>if<br>foreach<br>循环<br>关联<br>跨越线程组关联</p><h4 id="高并发"><a href="#高并发" class="headerlink" title="高并发"></a>高并发</h4><p>场景：模拟100个用户同时访问服务器资源，要求平均响应时间3000ms内，且错误率为0</p><p>同时执行的请求数（线程数），使用同步定时器，分组一般是并发数，超时时间一般填10</p><h4 id="高频率"><a href="#高频率" class="headerlink" title="高频率"></a>高频率</h4><p>模拟2个用户以20qps的频率访问服务器资源持续10s，要求平均响应时间在3000ms内，错误率0<br>使用常数吞吐量定时器<br>线程数：用户数<br>循环次数：qps<em>持续时间<br>常数吞吐量定时器：目标吞吐量填qps</em>60</p><h4 id="固定定时器"><a href="#固定定时器" class="headerlink" title="固定定时器"></a>固定定时器</h4><p>先执行延迟，再执行请求，指一组请求之间的间隔时间，如果线程数是10，延迟一段时间后，会同时执行10个请求，再延迟一段时间</p><h4 id="分布式"><a href="#分布式" class="headerlink" title="分布式"></a>分布式</h4><h4 id="生成图形化测试报告"><a href="#生成图形化测试报告" class="headerlink" title="生成图形化测试报告"></a>生成图形化测试报告</h4><blockquote><p>jmeter -n -t filename.jmx -l filename.ltx -e -o 目录<br>-n 无图形化运行<br>-t jmx脚本文件<br>-l 运行信息写入日志文件<br>-e 生成测试报告<br>-o 指定报告输出目录</p></blockquote><h4 id="接口测试流程："><a href="#接口测试流程：" class="headerlink" title="接口测试流程："></a>接口测试流程：</h4><blockquote><p>指定测试计划，分配任务<br>从api文档中提取接口清单，对api文档简化，提高测试效率，接口清单就是对api文档简化压缩，主要提取三要素（url，method，数据）<br>设计测试用例并参数化覆盖测试用例<br>编写脚本实现，并导入设计的测试数据<br>测试结果汇总，bug提交</p></blockquote><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><h4 id="端口被占用"><a href="#端口被占用" class="headerlink" title="端口被占用"></a>端口被占用</h4><blockquote><p>Waiting for possible Shutdown/StopTestNow/HeapDump/ThreadDump message on port 4445</p><p>修改jmeter根目录下的bin/jemeter.properties文件<br>To disable, set the port to 1000 or less.<br>jmeterengine.nongui.port=1000</p></blockquote><h4 id="部分请求失败或超时"><a href="#部分请求失败或超时" class="headerlink" title="部分请求失败或超时"></a>部分请求失败或超时</h4><blockquote><p>性能测试，并发数太大，导致端口不足</p><ol><li>设置windows注册表<ol><li>cmd中，用regedit命令打开注册表</li><li>在 HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters，右键添加一个新的DWORD，名字为MaxUserPort，双击MaxUserPort，输入数值数据为65534，基数选择十进制</li><li>重启电脑</li></ol></li><li>设置注册表的端口释放时间<ol><li>cmd输入：regedit</li><li>找到HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\TCPIP\Parameters，新建 QWORD值，name：TcpTimedWaitDelay，value：30（十进制）</li><li>重启系统</li></ol></li><li>jmeter线程组不勾选keep live</li></ol></blockquote><h4 id="分布式压测连接失败"><a href="#分布式压测连接失败" class="headerlink" title="分布式压测连接失败"></a>分布式压测连接失败</h4><blockquote><p>Connection refused to host:172.16.129.43;nested exception is:java.net.ConnectException:Connection timed out:connect.</p><p>关闭防火墙</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown常用语法</title>
      <link href="/2021/10/13/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/"/>
      <url>/2021/10/13/markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>markdown文件后缀.md</p><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><blockquote><p>#表示一级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><p>##表示二级标题</p><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><p>共六级标题</p></blockquote><h4 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h4><blockquote><p>+表示无序序列</p><ul><li>无序序列</li></ul><p>-表示无序序列</p><ul><li>无序序列</li></ul><p>*表示无序序列</p><ul><li>无序序列</li></ul><p>1.表示有序序列</p><ol><li>有序序列</li></ol></blockquote><h4 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h4><blockquote><p>三个飘号表示代码块```</p><p>效果：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">代码块<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></blockquote><h4 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h4><blockquote><p>[链接文字](url)</p><p>效果：</p><p><a class="link"   href="http://www.baidu.com/" >百度<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="引用说明"><a href="#引用说明" class="headerlink" title="引用说明"></a>引用说明</h4><blockquote><p>&gt;表示引用说明</p><blockquote><p>这是引用说明的效果</p></blockquote></blockquote><h4 id="typora软件配置"><a href="#typora软件配置" class="headerlink" title="typora软件配置"></a>typora软件配置</h4><p><img src="https://random-upload.oss-cn-shenzhen.aliyuncs.com/image-20211014170709278.png" alt="typora上传图片配置"></p><h4 id="markdown配置图片上传配置文件"><a href="#markdown配置图片上传配置文件" class="headerlink" title="markdown配置图片上传配置文件"></a>markdown配置图片上传配置文件</h4><blockquote><p><a class="link"   href="https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed-upyun" >https://picgo.github.io/PicGo-Core-Doc/zh/guide/config.html#picbed-upyun<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="配置文件aliyun"><a href="#配置文件aliyun" class="headerlink" title="配置文件aliyun"></a>配置文件aliyun</h4><blockquote><p>{<br>“picBed”: {<br>“uploader”: “aliyun”,<br>“aliyun”: {<br>“accessKeyId”: “LTAI4GHZ8gh5m72xxxxxx”,<br>“accessKeySecret”: “XojhgOm7wz7OW478Kxxxxxxx”,<br>“bucket”: “random-upload”,<br>“area”: “oss-cn-shenzhen”,<br>“path”: “”,<br>“customUrl”: “”,<br>“options”: “”<br>}<br>},<br>“picgoPlugins”: {}<br>}</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建静态博客网站</title>
      <link href="/2021/10/13/%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/"/>
      <url>/2021/10/13/%E6%90%AD%E5%BB%BA%E9%9D%99%E6%80%81%E5%8D%9A%E5%AE%A2%E7%BD%91%E7%AB%99/</url>
      
        <content type="html"><![CDATA[<h4 id="hexo框架官网"><a href="#hexo框架官网" class="headerlink" title="hexo框架官网"></a>hexo框架官网</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>hexo<span class="token punctuation">.</span>io<span class="token operator">/</span>zh<span class="token operator">-</span>cn<span class="token operator">/</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h4><ol><li>nodejs</li></ol><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><blockquote><p><a class="link"   href="https://hexo.io/zh-cn/docs/" >https://hexo.io/zh-cn/docs/<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><blockquote><p>修改完配置文件后要确认配置文件的格式是utf-8，否则会导致标题乱码</p><p>hexo s启动服务后,如果修改文件，保存后，网页刷新后可以看到修改的文件，但是不会生成静态的文件，即public文件夹中不会生成文件，需要使用hexo g生成</p></blockquote><h4 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h4><blockquote><p><a class="link"   href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" >https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><blockquote><p>代码块显示错乱，使用最新版本，安装github上的配置高亮即可</p><p><a class="link"   href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md" >https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md<i class="fas fa-external-link-alt"></i></a></p></blockquote><h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><blockquote><p><a class="link"   href="http://nicethemes.cn/news/txtlist_i35928v.html" >http://nicethemes.cn/news/txtlist_i35928v.html<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/weixin_39759247/article/details/107055255" >https://blog.csdn.net/weixin_39759247/article/details/107055255<i class="fas fa-external-link-alt"></i></a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo网站搭建 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
